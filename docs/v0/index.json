[
{
	"uri": "https://docs.thingsdb.net/v0/getting-started/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": "Getting started Try for free Get your own playground for free at https://thingsdb.net and continue reading at connect.\nOr.., build your own ThingsDB by cloning the GitHub project and follow the steps in the next paragraphs.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/getting-started/build-from-source/",
	"title": "Build from source",
	"tags": [],
	"description": "",
	"content": "Install the following dependencies:\n libuv1 libpcre2 libyajl libcleri (\u0026gt;=0.12.1)  When using Debian/Ubuntu; libuv1, libpcre2 and libyajl can be installed using apt:\nsudo apt-get install -y \\  libuv1-dev \\  libpcre2-dev \\  libyajl-dev At least version 0.12.1 for library libcleri-dev is required.\ngit clone https://github.com/transceptor-technology/libcleri.git cd libcleri/Release make sudo make install Next, clone the project\ngit clone https://github.com/thingsdb/ThingsDB.git cd ThingsDB/Release make clean \u0026amp;\u0026amp; make You might want to create a symlink like this:\nsudo ln -s ~/ThingsDB/Release/thingsdb /usr/local/bin/thingsdb "
},
{
	"uri": "https://docs.thingsdb.net/v0/getting-started/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "ThingsDB can start with a configuration file and/or with environment variables. However be aware that the environment variables will overwrite the configuration file settings if both apply to the same setting.\n   Variable Default Description     THINGSDB_LISTEN_CLIENT_PORT 9200 Listen on this TCP port for client socket connections.   THINGSDB_BIND_CLIENT_ADDR 0.0.0.0 Bind client connections to this address. This may also be an IPv6 address like ::.   THINGSDB_NODE_NAME hostname ThingsDB will publish itself to other nodes using this node name.   THINGSDB_LISTEN_NODE_PORT 9210 Listen on this TCP port for node connections.   THINGSDB_BIND_NODE_ADDR 0.0.0.0 Bind node connections to this address. This may also be an IPv6 address like ::.   THINGSDB_IP_SUPPORT ALL Listen to IPv4 (IPV4ONLY), IPv6 (IPV6ONLY) or both (ALL) addresses.   THINGSDB_STORAGE_PATH depends Location to store ThingsDB data. The default location depends on the user who is running ThingsDB. (/var/lib/thingsdb/ for root and ~/.thingsdb/ for a normal user).   THINGSDB_PIPE_CLIENT_NAME disabled Named PIPE for client connections. Support for client PIPE connections will be disabled if the value is not configured.   THINGSDB_THRESHOLD_FULL_STORAGE 1000 Threshold for number of events before initiating a full database store.   THINGSDB_HTTP_STATUS_PORT disabled TCP port for listening to health and readiness checks.   THINGSDB_HTTP_API_PORT disabled TCP port for listening to HTTP API calls.   THINGSDB_ZONE 0 Start node in this zone number. Zones are used for forwarding queries while in away mode.   THINGSDB_QUERY_DURATION_WARN disabled Log a warning message when a query takes more than X second(s).   THINGSDB_QUERY_DURATION_ERROR disabled Log an error message when a query takes more than X second(s).    "
},
{
	"uri": "https://docs.thingsdb.net/v0/getting-started/start-up-node/",
	"title": "Start up node",
	"tags": [],
	"description": "",
	"content": " ThingsDB can work with a single node but is designed to work with at least two nodes but three nodes are preferred. Running on three nodes brings redundancy and ensures the database stays operational, even while you for example upgrade ThingsDB to a newer version.\n After building the source code and making a symlink, you can start your first node using the following command. You need to add the --init flag to initialize a new ThingsDB store.\nthingsdb --init Starting a second (or other) node needs a secret.\nthingsdb --secret second The secret is used when adding this node; see new_node documentation on how to add a second (or other) node to ThingsDB.\nFlag information    Flag Description     -h, --help Show the help message and exit.   -c, --config CONFIG Define which ThingsDB configuration file to use.   --deploy Auto set --init or --secret based on the THINGSDB_NODE_NAME and THINGSDB_NODE_SECRET environment variable. A use case is explained in the next paragraph.   --init Initialize a new ThingsDB store.   --force Force --init or --secret to remove existing data if exists.   --secret SECRET Set one time secret and wait for request to join.   --rebuild Rebuild the node (can only be used when having \u0026gt;1 nodes). A use case is explained in the next paragraph.   --forget-nodes Forget all nodes info and load ThingsDB with a single node. A use case is explained in the next paragraph.   -v, --version Show version information and exit.   -l, --log-level Set initial log level: debug, info, warning, error, critical.   --log-colorized Use colorized logging.   -y, --yes Confirm questions with yes.    Use cases Containerized environments In containerized environments like kubernetes it is often useful to initialize automatically based on the node name. The --deploy argument is created for this purpose and triggers the following behavior.\n If the node name ends with -0, the node is considered to be the first node and will automatically set the --init argument in case the node is started for the first time. If the node does not end with -0, then the node will be started with --secret when the node is started for the first time. The secret will be equal to the node name unless the environment variable THINGSDB_NODE_SECRET is set.  Restore from backup When you need to restore from a back up you will need to set the environment variable THINGSDB_STORAGE_PATH to the latest backup file (.tar.gz). Then you can start ThingsDB again with the following command:\nthingsdb --forget-nodes The --forget-nodes flag is in this case very useful. The flag causes to forget all nodes. You can just start with one node without getting in a situation where the quorum will not be reached when multiple nodes are down. After the first node has started you can then simply add other nodes again.\nFix a corrupted node When you get in the situation that one of your nodes is corrupted for some reason, you can shutdown the node and start it again with the following flag:\nthingsdb --rebuild This causes the node to wipe its corrupted data and synchronize again with one of the other healthy nodes.\nUsing the --rebuild flag is a simplified way of doing the following but same thing. You shutdown the corrupted node. Delete it as well, so the other nodes forget about this node. Then start the node again with the following command:\nthingsdb --force The --force flag causes to wipe all the stored data and start fresh. Then you can add this node again to the ThingsDB store.\nAs you will notice this takes a couple of more steps, so it is easier to just use the --rebuild\tflag.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/getting-started/readiness-liveness/",
	"title": "Readiness and liveness",
	"tags": [],
	"description": "",
	"content": "When http_status_port in the configuration file or the environment variable THINGSDB_HTTP_STATUS_PORT is set then /status, /ready and /healthy are available. These can be used for readiness and liveness requests.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/",
	"title": "Connect",
	"tags": [],
	"description": "",
	"content": "Connect There are several options to communicate with ThingsDB. By default each node listens to port 9200 for TCP socket connections. With a socket connection it is possible to do queries, run procedures and watch for changes made to individual things in a collection.\nThe most easy way to use the socket connection is to use an existing connector. ThingsDB currently has connectors available for Python and Go. For other languages you can read the socket protocol section on how to implement a ThingsDB connector.\nAs an alternative to the socket connection, a ThingsDB node has support for HTTP request through an HTTP API.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/authentication/",
	"title": "Authentication",
	"tags": [],
	"description": "",
	"content": "ThingsDB supports authentication by using a user and password combination, or with a token. A default user admin with password pass is created on a fresh installation. If you did not yet change the default password, you might want to jump to set password or jump to token authentication.\nIt might be a good idea to create a new user with minimal privileges and add a new token for this user. See the grant and revoke functions for managing privileges for a user.\nFor connecting to ThingsDB with a auto-reconnect client, WATCH privileges on the .node scope are required.\n Token authentication This is a small tutorial to create a token and remove the password for the default admin user. This can be done with any client but in this tutorial the HTTP API is used with simple curl commands.\nFirst we create a new token, and then we remove the password from the admin user. Although this could be done in one step, we do this in two steps to be sure the new token works before removing the password.\n Replace 127.0.0.1:9210 with the address and port where your node is listening on for API requests\n curl --location --request POST \u0026#39;http://127.0.0.1:9210/thingsdb\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --user admin:pass \\ --data-raw \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;query\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;new_token(\u0026#39;\\\u0026#39;\u0026#39;admin\u0026#39;\\\u0026#39;\u0026#39;);\u0026#34; }\u0026#39; The will return a JSON string containing a new token, for example: \u0026quot;YyZcvq7BY3w+VgOTvXzTZp\u0026quot;\nWe can now use this token key to remove the password from user admin:\ncurl --location --request POST \u0026#39;http://127.0.0.1:9210/thingsdb\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Bearer YyZcvq7BY3w+VgOTvXzTZp\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;query\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;set_password(\u0026#39;\\\u0026#39;\u0026#39;admin\u0026#39;\\\u0026#39;\u0026#39;, nil);\u0026#34; }\u0026#39; "
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/http-api/",
	"title": "HTTP API",
	"tags": [],
	"description": "",
	"content": "Before using the HTTP API, make sure at least one node has the API port enabled. By default the API port is enabled and listening to TCP port 9210, but can be disabled or changed with the http_api_port in the configuration file or with the THINGSDB_HTTP_API_PORT environment variable.\nThe API has support for both MessagePack and JSON and can be used to perform queries and run procedures.\nUse MessagePack if possible since this is the data serialization protocol which is used by ThingsDB internally and will therefore be a faster than JSON. It also allows for sending and receiving binary data and is usually more compact than JSON. In most examples we use JSON just because it is more readable.\n Headers The header field Content-Type is required and needs to be either application/msgpack or application/json.\nQuery request    field description     type Required and must be query for a query request.   code Required string with the query code to preform.   vars Optional and may contain a map where the keys are variable names and the values will be the variable values.    Query example  Example using curl with token authentication: (using a playground collection Doc)\n curl --location --request POST \u0026#39;https://playground.thingsdb.net//Doc\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Bearer Fai6NmH7QYxA6WLYPdtgcy\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;query\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;.greetings.choice();\u0026#34; }\u0026#39;  choice() returns a random item from the .greetings array)\n  Possible response\n \u0026#34;Hi!\u0026#34; Besides the preferred token authentication, the HTTP API has also support for basic authentication.\n Another curl example using basic authentication using user Doc with password pass:\n curl --location --request POST \u0026#39;https://playground.thingsdb.net//Doc\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --user Doc:pass \\ --data-raw \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;query\u0026#34;, \u0026#34;code\u0026#34;: \u0026#34;1 + 1;\u0026#34; }\u0026#39;  Example response:\n 2 Run request    field description     type Required and must be run for a run request.   name Name of the procedure to run.   args Array or map with arguments for the procedure.    Run example The ThingsDB playground has a collection Doc with a procedure named multiply which accepts two arguments and returns the two arguments multiplied.\n If you want to create the multiply procedure yourself, this is the code:\n new_procedure('multiply', |a, b| a*b);  Example using the playground:\n curl --location --request POST \u0026#39;https://playground.thingsdb.net//Doc\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Bearer Fai6NmH7QYxA6WLYPdtgcy\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;type\u0026#34;: \u0026#34;run\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;multiply\u0026#34;, \u0026#34;args\u0026#34;: [6, 7] }\u0026#39;  Response\n 42  Instead of providing the arguments as an array, they also could be given as a map, for example {\u0026quot;a\u0026quot;: 6, \u0026quot;b\u0026quot;: 7}.\n "
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": "Installation The python-thingsdb library requires Python 3.6 or higher.\n Just use pip:\npip install python-thingsdb Or, clone the project and use setup.py:\npython setup.py install Quick usage import asyncio from thingsdb.client import Client async def hello_world(): client = Client() # replace `localhost` with your ThingsDB server address await client.connect(\u0026#39;localhost\u0026#39;) try: # replace `admin` and `pass` with your username and password # or use a valid token string await client.authenticate(\u0026#39;admin\u0026#39;, \u0026#39;pass\u0026#39;) # perform the hello world code... print(await client.query(\u0026#39;\u0026#39;\u0026#39; \u0026#34;Hello World!\u0026#34;; \u0026#39;\u0026#39;\u0026#39;)) finally: # the will close the client in a nice way client.close() await client.wait_closed() # run the hello world example asyncio.get_event_loop().run_until_complete(hello_world()) More info A more complete description of the Python client can be found in one of the links below.\n https://github.com/thingsdb/python-thingsdb#readme https://pypi.org/project/python-thingsdb/  "
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/go/",
	"title": "Go",
	"tags": [],
	"description": "",
	"content": "Installation Simple install the package to your $GOPATH with the go tool from shell:\n$ go get github.com/thingsdb/go-thingsdb Make sure Git is installed on your machine and in your system\u0026rsquo;s PATH.\nQuick usage package main import ( \u0026#34;crypto/tls\u0026#34; \u0026#34;fmt\u0026#34; thingsdb \u0026#34;github.com/thingsdb/go-thingsdb\u0026#34; ) func example(conn *thingsdb.Conn, res chan interface{}) { var data interface{} var err error if err := conn.Connect(); err != nil { res \u0026lt;- err return } defer conn.Close() if err := conn.AuthToken(\u0026#34;Fai6NmH7QYxA6WLYPdtgcy\u0026#34;); err != nil { res \u0026lt;- err return } if data, err = conn.Query( \u0026#34;//Doc\u0026#34;, // Scope \t\u0026#34;.greetings.choice();\u0026#34;, // ThingsDB code \tnil, // Optional array with variable (may be `nil`) \t120, // Timeout in seconds \t); err != nil { res \u0026lt;- err return } res \u0026lt;- data } func main() { // Only required for a secure connection \tconf := \u0026amp;tls.Config{ InsecureSkipVerify: false, } // In this example we will use a channel to read the example response \tres := make(chan interface{}) // Create a new ThingsDB connection \tconn := thingsdb.NewConn(\u0026#34;playground.thingsdb.net\u0026#34;, 9400, conf) // Set-up a log channel, this is not required \tconn.LogCh = make(chan string) // Start our example \tgo example(conn, res) // Log handler \tgo func() { for { msg := \u0026lt;-conn.LogCh fmt.Printf(\u0026#34;Log: %s\\n\u0026#34;, msg) } }() // Wait for the response \tdata := \u0026lt;-res // Print the response (or error) \tfmt.Printf(\u0026#34;%v\\n\u0026#34;, data) }  Possible response\n Log: connected to playground.thingsdb.net:9400 using a secure connection Welcome at ThingsDB! More info A more complete description of the Go client can be found in the link below.\n https://github.com/thingsdb/go-thingsdb#readme  "
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/socket/",
	"title": "Socket",
	"tags": [],
	"description": "",
	"content": "This is a more in depth view of the socket protocol used for communication with ThingsDB. In case you just want to use ThingsDB using one of the language bindings, then this info can be skipped. If you plan to implement your own connector, then this info might be useful to you.\nThis section applies to communication with ThingsDB over a socket, either by using TCP or a UNIX PIPE connection. Once a connection is made, packages can be send to ThingsDB. Each package starts with a 8 bytes header using little endian, followed by optional data. Before you can send queries to ThingsDB, the connection must be authenticated. This can be done by sending an AUTH package.\nPackage LEN (Unsigned, 32bit) Length of the data, stored as Unsigned, 32-bit, Little Endian. The header size is not included in the length.\nID (16bit) The ID can be used as an identifier of your package. When ThingsDB send a response on a request, it will use the same ID so this allows you to map a response to a request. This is useful if you want to send multiple requests in parallel. It needs to be stored as 16-bit, Little Endian.\nTYPE (Unsigned, 8bit) Package type is used to describe what kind of package is transmitted.\nRequest type    Type Number Description     PING 32 Ping, useful as keep-alive.   AUTH 33 Authorization., expects: [username, password] or a token_string.   QUERY 34 Query ThingsDB.   WATCH 35 Watch for changes on specific things.   UNWATCH 36 Stop watching for changes on specific things.   RUN 37 Run a procedure, see procedures for more info.    CHK (Unsigned, 8bit) Inverse of the type: type ^ 0xff. This is used as a check-bit.\nDATA Data serialized using MessagePack.\n Package format:\n ┌───────────┬───────────┬───────────┬───────────┬───────────┐ │ LEN (4) │ ID (2) │ TYPE (1) │ CHK (1) │ DATA (..) │ └───────────┴───────────┴───────────┴───────────┴───────────┘ Response type ThingsDB can respond with one of the following response type:\n   Type Number Description     PONG 16 Success response to PING (header only).   OK 17 Success response to AUTH, WATCH and UNWATCH (header only).   DATA 18 Success response to QUERY and RUN (with data).   ERROR 19 Error response (with data).    Example As an example we create an authentication package for the default admin user with password pass.\nThis is the package data for our authentication request:\n[\u0026quot;admin\u0026quot;, \u0026quot;pass\u0026quot;]\nSerializing the above using MessagePack results in the following 12 bytes:\n\\x92\\xa5admin\\xa4pass\nNow we create the header. For this example we just use ID 0:\n Data length (12) \\x0c\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Auth package type (33) \\x21 Inverse type check bit (222) \\xde  So our total package will be:\n\\x0c\\x00\\x00\\x00\\x00\\x00\\x21\\xde\\x92\\xa5admin\\xa4pass\nMore examples Some more examples:\n sending a ping request sending an authentication request sending a query request sending a run request sending a watch request receiving an error response  "
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/socket/ping/",
	"title": "Example ping",
	"tags": [],
	"description": "",
	"content": "Can be used as keep-alive. A successful ping will respond with a PONG (16)\nNo authorization is required for sending a ping request.\n Example A Ping package has no data so we only need to construct the header:\n Data length (0) \\x00\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Ping package type (32) \\x20 Inverse type check bit (223) \\xdf   Sending the Ping package\n \\x00\\x00\\x00\\x00\\x00\\x00\\x20\\xdf  Responding Pong package\n \\x00\\x00\\x00\\x00\\x00\\x00\\x10\\xef "
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/socket/auth/",
	"title": "Example auth",
	"tags": [],
	"description": "",
	"content": "Used for authorizing the socket connection. A successful authentication will respond with OK (17)\nAuthorization can be done by using either a username and password combination or by a token.\n Syntax username/password\n [username, password]  Syntax token\n \u0026quot;token_string\u0026quot; Example username/password As an example we create an authentication package for the default admin user with password pass.\nThis is the package data for our authentication request:\n[\u0026quot;admin\u0026quot;, \u0026quot;pass\u0026quot;]\nSerializing the above using MessagePack results in the following 12 bytes:\n\\x92\\xa5admin\\xa4pass\nNow we create the header. For this example we just use ID 0:\n Data length (12) \\x0c\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Auth package type (33) \\x21 Inverse type check bit (222) \\xde   Sending the Auth package\n \\x0c\\x00\\x00\\x00\\x00\\x00\\x21\\xde\\x92\\xa5admin\\xa4pass  Responding OK package\n \\x00\\x00\\x00\\x00\\x00\\x00\\x11\\xee Example token First, a token is required and can be created using the new_token() function.\nSuppose our token is RzDFlsoucQfDqrwrfGGEtc.\nSerializing the token using MessagePack results in the following 23 bytes:\n\\xb6RzDFlsoucQfDqrwrfGGEtc\nNow we create the header. For this example we just use ID 0:\n Data length (23) \\x17\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Auth package type (33) \\x21 Inverse type check bit (222) \\xde   Sending the Auth package\n \\x17\\x00\\x00\\x00\\x00\\x00\\x21\\xde\\xb6RzDFlsoucQfDqrwrfGGEtc  Responding OK package\n \\x00\\x00\\x00\\x00\\x00\\x00\\x11\\xee "
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/socket/query/",
	"title": "Example query",
	"tags": [],
	"description": "",
	"content": "Query ThingsDB. A successful query request will respond with a DATA (18) package.\n Syntax\n [scope, code, {vars}] The vars in the query are optional and may be omitted. When used, vars must be a map where the keys represent the variable names and the values the values for the variable.\nThe socket needs to be authorized before sending a query request. See the auth example for how to authorize a socket connection.\n Example As an example we will perform a useless query with as code just the simple equation 1 + 1; and we will use the @thingsdb scope to perform the query on.\nThis is the data we want to pack:\n[\u0026quot;@t\u0026quot;, \u0026quot;1 + 1;\u0026quot;]\nSerializing the above using MessagePack results in the following 11 bytes:\n\\x92\\xa2@t\\xa61 + 1;\nNow we create the header. For this example we just use ID 0:\n Data length (11) \\x0b\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Query package type (34) \\x22 Inverse type check bit (221) \\xdd   Sending the Query package\n \\x0b\\x00\\x00\\x00\\x00\\x00\\x22\\xdd\\x92\\xa2@t\\xa61 + 1;  Responding Data package\n \\x01\\x00\\x00\\x00\\x00\\x00\\x12\\xed\\x02 We see that the DATA response package has a header with attached data of length 1.\nUnpacking the data \\x02 using MessagePack will return the expected value 2 which is the answer to our equation.\nIf your socket connection is not authenticated then you will receive an error response.\n "
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/socket/run/",
	"title": "Example run",
	"tags": [],
	"description": "",
	"content": "Run a procedure in ThingsDB. A successful run request will respond with a DATA (18) package.\n Syntax\n [scope, procedure, ...args] The args are parsed (and must match) to the procedure.\nThe socket needs to be authorized before sending a run request. See the auth example for how to authorize a socket connection.\n Example As an example we assume there is a procedure created in the @thingsdb scope, called \u0026ldquo;add_one\u0026rdquo; which just adds one to a given value. The procedure can be created using new_procedure('add_one', |x| x + 1);, see new_procedure().\nThis is the data we want to pack:\n[\u0026quot;@t\u0026quot;, \u0026quot;add_one\u0026quot;, 41]\nSerializing the above using MessagePack results in the following 13 bytes:\n\\x93\\xa2@t\\xa7add_one)\nNow we create the header. For this example we just use ID 0:\n Data length (13) \\x0d\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Run package type (37) \\x25 Inverse type check bit (218) \\xda   Sending the Query package\n \\x0d\\x00\\x00\\x00\\x00\\x00\\x25\\xda\\x93\\xa2@t\\xa7add_one)  Responding Data package\n \\x01\\x00\\x00\\x00\\x00\\x00\\x12\\xed* We see that the DATA response package has a header with attached data of length 1.\nUnpacking the data * using MessagePack will return the expected value 42 which is the expected result.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/socket/watch/",
	"title": "Example watch",
	"tags": [],
	"description": "",
	"content": "Subscribe for watching a node or things in ThingsDB. A successful run request will respond with a OK (17) package.\n Syntax\n [scope, ...IDs] The IDs are the thing-IDs you want to watch.\nThe socket needs to be authorized before sending a watch request. See the auth example for how to authorize a socket connection.\n Example As an example we assume that we want to watch a thing with ID 3 for mutations. Instead of a single ID, we could add as much IDs as we wanted.\nThingsDB will throw a WARNING event to you socket connection in case some given ID does not exist within the given collection scope. Other IDs will be watched and the response to you watch request will still be OK (17).\n This is the data we want to pack:\n[\u0026quot;//stuff\u0026quot;, 3]\nSerializing the above using MessagePack results in the following 10 bytes:\n\\x92\\xa7//stuff\\x03\nNow we create the header. For this example we just use ID 0:\n Data length (13) \\x0a\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Run package type (35) \\x23 Inverse type check bit (218) \\xdc   Sending the Query package\n \\x0a\\x00\\x00\\x00\\x00\\x00\\x23\\xdc\\x92\\xa7//stuff\\x03  Responding OK package\n \\x00\\x00\\x00\\x00\\x00\\x00\\x11\\xee A few seconds (or less) later, you will receive an init or warning event on the socket connection.\nSee the watching documentation for more information.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/connect/socket/error-response/",
	"title": "Example error response",
	"tags": [],
	"description": "",
	"content": "In this example we perform a query request and assume the socket connection is not authenticated yet. We then look at the error response.\nExample As an example we will perform a useless query with as code just the simple equation 1 + 1; and we will use the @thingsdb scope to perform the query on.\nThis is the data we want to pack:\n[\u0026quot;@t\u0026quot;, \u0026quot;1 + 1;\u0026quot;]\nSerializing the above using MessagePack results in the following 11 bytes:\n\\x92\\xa2@t\\xa61 + 1;\nNow we create the header. For this example we just use ID 0:\n Data length (11) \\x0b\\x00\\x00\\x00 Identifier (0) \\x00\\x00 Query package type (34) \\x22 Inverse type check bit (221) \\xdd   Sending the Query package\n \\x0b\\x00\\x00\\x00\\x00\\x00\\x22\\xdd\\x92\\xa2@t\\xa61 + 1;  If the connection is not authenticated, this will be the responding Data package\n 8\\x00\\x00\\x00\\x00\\x00\\x13\\xec\\x82\\xaaerror_code\\xd0\\xc8\\xa9error_msg\\xbfconnection is not authenticated The first 8 bytes (8\\x00\\x00\\x00\\x00\\x00\\x13\\xec) contain the header:\n Data length 8\\x00\\x00\\x00 = 56 Package ID: \\x00\\x00 = 0 Type: \\x13 = 19 (ERROR) Check-bit: \\xec = 236 (19^255)  We see that the ERROR response package data of length 56.\nUnpacking the data \\x82\\xaaerror_code\\xd0\\xc8\\xa9error_msg\\xbfconnection is not authenticated using MessagePack will return the following in JSON format:\n{ \u0026#34;error_code\u0026#34;: -56, \u0026#34;error_msg\u0026#34;: \u0026#34;connection is not authenticated\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "Overview In this section we briefly try to explain some concepts of ThingsDB.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/overview/scopes/",
	"title": "Scopes",
	"tags": [],
	"description": "",
	"content": "When sending a query, calling a procedure or subscribing to a thing, the request will require you to provide a scope. ThingsDB has three scope categories: @thingsdb, @node and @collection.\n   scope short description     @thingsdb @t ThingsDB scope; Used for managing user accounts, collections and nodes.   @node @n Current node scope; For node info and statistics from the connected node.   @node:ID @n:ID Specific node scope; Get node info and statistics from a specific node id (ID should be replaced with a node ID, for example 0).   @collection:NAME @:NAME Collection scope; A collection where things are stored.   @collection:ID @:ID Collection scope; By collection ID instead of the using the collection name.    Scopes names do allow an alternative syntax where the @ and : are replaced with the / character. For example @collection:stuff can be written as /collection/stuff and the short version @:stuff may be written as //stuff.\n "
},
{
	"uri": "https://docs.thingsdb.net/v0/overview/collections/",
	"title": "Collections",
	"tags": [],
	"description": "",
	"content": "Each collection can be thought of as an object to which properties can be assigned. We call such an object a Thing. To access something in the collection, all you need to do, is to start with a . (dot), followed by a function or property name. Another way to access the collection is to use the collection\u0026rsquo;s ID. All things which are stored in ThingsDB get an unique ID. Since the collection root is also a Thing, it has its own id.\n For example, to read the collection\u0026rsquo;s ID:\n .id(); // This will return the collection ID To store something inside the collection you only need to make sure the data is attached to the collection.\n For example:\n // Saves a number `42` .number = 42; // Saves some text to property `txt` .txt = 'Hello ThingsDB!'; // Saves a new `thing` to property `card` .card = { suit: 'Spades', value: 1, }; // The last value will be the return value. It may be just `nil` nil; Reading data from a collection works similar. Just ask for the property.\n For example:\n .txt; // Returns the value of property `txt`  Result in JSON format:\n \u0026#34;Hello ThingsDB!\u0026#34; To return multiple properties at once, it is often useful to put them in an array:\n[.txt, .number]; // Returns both property `txt` and `number`  And the result in JSON format:\n [ \u0026#34;Hello ThingsDB!\u0026#34;, 42 ] Stored things will get an ID (#) from ThingsDB.\n For example look at our card example:\n .card; // Returns the value of property `card`  Result in JSON format (The ID (#) might differ since it is auto-generated by ThingsDB)\n { \u0026#34;#\u0026#34;: 17, \u0026#34;suit\u0026#34;: \u0026#34;Spades\u0026#34;, \u0026#34;value\u0026#34;: 1 } See the Collection API documentation for functions which can be used to manipulate ThingsDB data.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/overview/names/",
	"title": "Names",
	"tags": [],
	"description": "",
	"content": "The following rules apply to names in ThingsDB:\n A name must start with a letter or underscore character A name cannot start with a number A name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ) Names are case-sensitive (thing, Thing and THING are three different names) Names are restricted to 255 characters  "
},
{
	"uri": "https://docs.thingsdb.net/v0/overview/properties/",
	"title": "Properties",
	"tags": [],
	"description": "",
	"content": "Properties are names assigned to a thing with a value. The collection itself is also a thing to which properties can be assigned. For example: .answer = 42; creates a property answer with value 42 and the property will be assigned to the collection.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/overview/variable/",
	"title": "Variable",
	"tags": [],
	"description": "",
	"content": "Can be used to assign a value to a variable which can be used within a query.\nVariable can be created with READ privileges since they do not modify the collection\u0026rsquo;s data.\nTo create a variable, just assign a value to a valid name.\nSome valid examples:\n _ = ... tmp = ... var1 = ...  Variables created within a block become local. They can only be used within the block. See the example below:\na = 'This is a variable!!!'; b = 'Hello'; { /* This will create a new variable `a` within this block */ a = 'New variable within this block'; /* This will update the global variable `b` */ b += ' World'; }; [a, b];  Return value in JSON format\n [ \u0026#34;This is a variable!!!\u0026#34;, \u0026#34;Hello World\u0026#34; ] Injecting variable When running a query to ThingsDB, it is possible to inject variables into the code. This is easy, safe, and in some cases even necessary when for example inserting binary data.\n Python example:\n # inject a variable into the code: client.query(\u0026#39;.a = a;\u0026#39;, a=1) Prevent code injection Consider you have some user input which is supposed to contain a name, and you want to store that name in ThingsDB.\n# Variable `user_input` is supposed to contain a name like `Bob` client.query(f\u0026#39;.name = \u0026#34;{user_input}\u0026#34;;\u0026#39;) Instead of a name, a user could insert something like this: Bob\u0026quot;; .XXX = \u0026quot;This system is hacked!. This would result in the following query statement:\n.name = \u0026quot;Bob\u0026quot;; .XXX = \u0026quot;This system is hacked!\u0026quot;; This is very dangerous and definitely not what we want but luckily ThingsDB has a simple solution: variable injection\nclient.query(\u0026#39;.name = inp;\u0026#39;, inp=user_input) Using variable injection we can parse user input in a safe and secure way to ThingsDB.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/overview/events/",
	"title": "Events",
	"tags": [],
	"description": "",
	"content": "When a query uses a statement which makes a change to ThingsDB, then internally ThingsDB will create an event to apply these changes. Events are applied in order on each node; so database consistency is guaranteed.\nA single query might contain several statements and make many changes. All changes within a query will be grouped in a single event.\nIn the documentation we try to make clear if a function will generate an event or not. If you only want to read information from ThingsDB, you should try to avoid functions which generate an event. Functions on a list or set do not create an event when called on a variable.\n "
},
{
	"uri": "https://docs.thingsdb.net/v0/overview/slices/",
	"title": "Slices",
	"tags": [],
	"description": "",
	"content": "The following slice notation can be used:\nlist[start:stop:step] The start and stop value will default to nil and step has a default value of 1. For understanding slices it is important to remember that the :stop value represents the first value that is not in the selected slice. This means that the difference between stop and start is the number of selected items. (assuming that step is the default value 1)\nAnother feature is that negative numbers may be used. For start and stop this means that it will count from the end of the array instead of the beginning.\n Some examples using start and stop to select some items:\n months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; [ { months[:2]; /* first two months */ }, { months[-2:]; /* last two months */ }, { months[:-2]; /* all, except the last two months */ }, ];  \u0026hellip;and the corresponding result in JSON format:\n [ [ \u0026#34;January\u0026#34;, \u0026#34;February\u0026#34; ], [ \u0026#34;November\u0026#34;, \u0026#34;December\u0026#34; ], [ \u0026#34;January\u0026#34;, \u0026#34;February\u0026#34;, \u0026#34;March\u0026#34;, \u0026#34;April\u0026#34;, \u0026#34;May\u0026#34;, \u0026#34;June\u0026#34;, \u0026#34;July\u0026#34;, \u0026#34;August\u0026#34;, \u0026#34;September\u0026#34;, \u0026#34;October\u0026#34; ] ] Another feature is the step argument, which also may be negative to reverse the slice direction.\n Some examples using the step value:\n months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']; [ { months[::2]; /* only the odd months */ }, { months[::-1]; /* months in reverse order */ }, ];  \u0026hellip;the corresponding result in JSON format:\n [ [ \u0026#34;January\u0026#34;, \u0026#34;March\u0026#34;, \u0026#34;May\u0026#34;, \u0026#34;July\u0026#34;, \u0026#34;September\u0026#34;, \u0026#34;November\u0026#34; ], [ \u0026#34;December\u0026#34;, \u0026#34;November\u0026#34;, \u0026#34;October\u0026#34;, \u0026#34;September\u0026#34;, \u0026#34;August\u0026#34;, \u0026#34;July\u0026#34;, \u0026#34;June\u0026#34;, \u0026#34;May\u0026#34;, \u0026#34;April\u0026#34;, \u0026#34;March\u0026#34;, \u0026#34;February\u0026#34;, \u0026#34;January\u0026#34; ] ] Slices can also be used to replace the splice function.\nIt is not possible to use the step value when assigning items using the slice syntax.\n  Example using the slice syntax to replace items in a list:\n months = ['January', 'February', 'XXX', 'May']; /* Replace 'XXX' with 'March' and 'April' */ months[2:3] = ['March', 'April']; /* Return result */ months;  Once again the result in JSON format:\n [ \u0026#34;January\u0026#34;, \u0026#34;February\u0026#34;, \u0026#34;March\u0026#34;, \u0026#34;April\u0026#34;, \u0026#34;May\u0026#34; ] Instead of lists and tuples it also possible to use the slice notion on strings\n Slice on string example:\n /* Return 'abcdef' in reverse order */ \u0026quot;abcdef\u0026quot;[::-1]; \u0026#34;fedcba\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/overview/template-strings/",
	"title": "Template Strings",
	"tags": [],
	"description": "",
	"content": "Template strings allows you to use embedded ThingsDB expressions to generate a string constant. Template strings are enclosed by the backtick (`) character instead of double or single quotes.\nHere is an example of how they may be used:\na = 6; b = 7; `The sum of {a} plus {b} is {a + b}.`;  Result in JSON format:\n \u0026#34;The sum of 6 plus 7 is 13.\u0026#34; If you wish to use the backtick character or curly brackets inside your string, then you need to escape those by using the same character twice. For example:\n`Example with ``Backticks`` and {{Curlies}}.`  Result in JSON format:\n \u0026#34;Example with `Backticks` and {Curlies}.\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/overview/dictionary/",
	"title": "Dictionary",
	"tags": [],
	"description": "",
	"content": "The following list contains definitions specific for ThingsDB:\n   Keyword Definition     Collection The collection is the root thing. Every collection has its own scope.   Closure A Closure is a user defined method which can be saved. It can be used as a prepared piece of code or to consume items from a thing, list, tuple or set.   Event ThingsDB creates an event when a query modifies something. Events are applied in order by each node to guarantee consistency.   Function Function in ThingsDB means a built in function. A function needs the exact number of arguments that is expected, which is different for a closure or procedure.   Node Node is the process running ThingsDB. ThingsDB can work with a single node but is designed to work with multiple nodes. Running on at least three nodes brings redundancy and ensures the database stays operational.   Procedure A procedure in ThingsDB is a named closure that is attached to a scope (@thingsdb or @collection) and available to use in an API call.   Scope When sending a query, calling a procedure or subscribing to a thing, the request will require you to provide a scope. ThingsDB has three scope categories: @thingsdb, @node and @collection.   Thing A thing is an object to which properties can be assigned.   Quorum ThingsDB ensures consistency across multiple nodes. This is achieved by events. Events get an ID which are in applied order. Before a node can assign an ID to an event, it needs approval of the majority of the existing nodes. Once a node has connected to the others, it takes part in the quorum. If a node goes down it still gets accounted for, but will negatively influence the quorum as it cannot respond. When a node is deleted it does not take part in the quorum anymore.   Zone When a node is in \u0026ldquo;away\u0026rdquo; mode, queries to a collection or ThingsDB scope will be forwarded to another node. If zones are configured, the node will first try a node within the same zone; only if no other node in the same zone is available, another node in another zone will be used.    "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/",
	"title": "Data Types",
	"tags": [],
	"description": "",
	"content": "Data Types ThingsDB uses the following data types:\n   type Description     bool Booleans are either true or false.   bytes Byte sequence.   closure Closures can be used as functions or to consume items from a thing, list, tuple or set.   enum Enumerators.   error An object containing information about an error.   float Floating point type.   info Return value of all *_info() functions.   int Integer type.   list Mutable array type.   nil Used to define a null value, or no value at all.   regex Regular expression.   set Unordered group of unique things.   str String type.   thing Object with key value pairs.   tuple Nested and immutable list.   Type Type are things with pre-defined properties.   \u0026lt;Type\u0026gt; Wrapped thing by a Type.    "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/bool/",
	"title": "bool",
	"tags": [],
	"description": "",
	"content": "Booleans are either true or false. Other types can convert to bool by using the ! (not) operator or the bool function.\n This code creates a bool property is_the_earth_flat to collection stuff:\n .is_the_earth_flat = !true; Related functions    Function Description     bool Create a new boolean value.   isbool Test if a given value is of type bool.    "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/bytes/",
	"title": "bytes",
	"tags": [],
	"description": "",
	"content": "The bytes type can be used to store a sequence of byte values.\n This code converts a string to bytes\n .as_bytes = bytes(\u0026quot;Hello ThingsDB!\u0026quot;); Functions    Function Description     len Return the length of the byte sequence.    Related functions    Function Description     bytes Create a new bytes value.   isbytes Test if a given value is of type bytes.    "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/bytes/len/",
	"title": "len",
	"tags": [],
	"description": "",
	"content": "Returns the length of the bytes value.\nThis function does not generate an event.\nFunction bytes.len()\nArguments None\nReturn value Returns length of the byte sequence.\nExample  This code uses len() to return the length of a byte sequence:\n bytes(\u0026quot;abc\u0026quot;).len();  Return value in JSON format\n 3 "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/closure/",
	"title": "closure",
	"tags": [],
	"description": "",
	"content": "Closures are user defined methods which can be saved. They can be used as a prepared piece of code or to consume items from a thing, list, tuple or set. They can also be used by procedures.\nClosure can be stored in a collection or assigned to a variable.\nA closure starts with a |, then takes optional arguments and a | to close, followed by a statement. The most simple closure is ||nil which is a closure without arguments and returns the value nil when called.\nMore complex closures are also possible, check the last example below.\nFunctions    Function Description     call Call the closure with optional arguments.   def Return the definition of a closure using spaces, line-breaks and indentation.   doc Return the doc string of the closure.    Closures may be called recursively up to a recursion depth of 24. If this limit is exceeded, an error is raised. For example: a = ||a(); a();\n\u0026hellip;will raise operation_err() (maximum recursion depth exceeded)\n Doc string Doc strings can be set on closures. This is especially useful when closures are used inside a procedure since this gives the procedure a nice documentation string.\nUsually, a doc string is just a normal string on top of a block in the closure.\nFor example:\n|| { \u0026quot;this is a doc string.\u0026quot;; }; It is common to wrap a block scope within one or more functions. When this is the case, the doc string will be read from the first argument, only if the first non-function argument contains a block scope with a doc string.\nFor example, this closure contains a block scope wrapped with return and wse:\n|| return(wse({ \u0026quot;this is still a doc string, even while wrapped using `return` and `wse`.\u0026quot;; }), 2); Examples  This code uses a simple closure together with map and call:\n // create a simple closure which just adds one to a given value add_one = |x| x+1; // use the closure in a `map` function map_result = [1, 2, 3].map(add_one); // use the closure as a function call call_result = add_one(41); // return the result values [map_result, call_result];  Return value in JSON format\n [ [ 2, 3, 4 ], 42 ] Like explained, closures can accept multiple arguments and may contain a block scope instead of just a single line statement. Here is an example:\n|name, age| { \u0026quot;Returns a thing with properties `name`, `age` and `time`.\u0026quot;; assert(isstr(name) \u0026amp;\u0026amp; name.len()); assert(isint(age) \u0026amp;\u0026amp; age \u0026gt;= 0); // this is the last statement so it will be the return value { name: name, age: age, time: now() }; }; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/closure/call/",
	"title": "call",
	"tags": [],
	"description": "",
	"content": "Call a closure.\nWhen assigned to a variable, it is not required to explicitly write the call function. Simply calling the closure by using () will work as well.\nThis function does not generate an event.\nFunction closure.call()\nArguments The arguments for the closure. If more arguments are given than the closure expects, the redundant arguments will be ignored. If too few arguments are given, then the remaining arguments will be set to nil.\nIt is not possible to assign default values to arguments but something similar can be accomplished by checking the argument within the closure. See the example below.\n Return value Returns the closure response.\nExample  Example code using call:\n // create a greet closure greet = |name| isstr(name) ? \u0026quot;Hello \u0026quot; + name : \u0026quot;Hello unnamed user!\u0026quot;; // call with a given name greet_iris = greet.call(\u0026quot;Iris\u0026quot;); // call with nil, without explicitly writing `.call()` greet_nil = greet(nil); // return the greet response values [greet_iris, greet_nil];  Return value in JSON format\n [ \u0026#34;Hello Iris\u0026#34;, \u0026#34;Hello unnamed user!\u0026#34; ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/closure/def/",
	"title": "def",
	"tags": [],
	"description": "",
	"content": "Returns the closure definition using spaces, line-breaks and indentation (4 spaces).\nThis function does not generate an event.\nFunction closure.def()\nArguments None\nReturn value Returns the closure definition.\nExample  This code creates a closure with a doc string:\n add_one = |x| { x + 1; }; // Return the definition as a string add_one.def();  Return value in JSON format\n \u0026#34;|x| {\\n x + 1;\\n}\u0026#34;  Or, when printed:\n |x| { x + 1; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/closure/doc/",
	"title": "doc",
	"tags": [],
	"description": "",
	"content": "Returns a doc string from a closure.\nAn empty string (\u0026quot;\u0026quot;) is returned if the closure has no doc string.\nThis function does not generate an event.\nFunction closure.doc()\nArguments None\nReturn value Returns the doc string.\nExample  This code creates a closure with a doc string:\n add_one = |x| { \u0026quot;Adds one to a given value.\u0026quot;; x+1; }; // Return the doc string add_one.doc();  Return value in JSON format\n \u0026#34;Adds one to a given value.\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/enum/",
	"title": "enum",
	"tags": [],
	"description": "",
	"content": "Enumerators are a set of unique names coupled to a unique set of values. ThingsDB support enumerators for type int, float, str, bytes and thing, where all members must have the same type. Thus, it is not possible to have an enum type with for example both values of type int and str. Enumerators with type thing may contain things using different Type as each instance of a Type is still a thing.\nFunctions    Function Description     name Return the name of the enum member.   value Return the value of the enum member.    Related functions    Function Description     del_enum Delete an enumerator type.   enum Get an enum member by value.   enum_info Return info about the enumerator type.   enums_info Return info about all the enumerator types in the current scope.   has_enum Determine if the current scope has a given enumerator type.   isenum Test if a given value is a member of an enumerator type.   mod_enum Modify an existing enumerator type.   set_enum Create a new enumerator type.    Example // Create an enumeration type using `set_enum` set_enum('Severity', { CRITICAL: 1, MAJOR: 2, MINOR: 3 }); // Get a member by name a = Severity{CRITICAL}; // Or, dynamically by name b = Severity{||'MAJOR'}; // Get a member by it's value c = enum('Severity', 3); // Variable `a`, `b` and `c` are all members of type `Severity` assert( type(a) == 'Severity' ); // The actual value can be accessed via the `.value()` function assert( b.value() == 2 ); // Or, the name can be returned using the `.name()` function assert( c.name() == 'MINOR'); // The value of the members will be returned in a response [a, b, c];  Return value in JSON format\n [ 1, 2, 3 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/enum/name/",
	"title": "name",
	"tags": [],
	"description": "",
	"content": "Returns the name of the enumerator member.\nThis function does not generate an event.\nFunction member.name()\nArguments None\nReturn value Returns the name of the enumerator member.\nExample  This code creates a closure with a doc string:\n set_enum(\u0026quot;Color\u0026quot;, { RED: '#f00' }); // Return the name of Color{RED} Color{RED}.name();  Return value in JSON format\n \u0026#34;RED\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/enum/value/",
	"title": "value",
	"tags": [],
	"description": "",
	"content": "Returns the value of the enumerator member.\nThis function does not generate an event.\nFunction member.value()\nArguments None\nReturn value Returns the name of the enumerator member.\nExample  This code creates a closure with a doc string:\n set_enum(\u0026quot;Color\u0026quot;, { RED: '#f00' }); val = Color{RED}.value(); assert( isstr( val ) ); // the value is of type `str` val.upper(); // Return the value upper case  Return value in JSON format\n \u0026#34;#F00\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/error/",
	"title": "error",
	"tags": [],
	"description": "",
	"content": "When an error occurs within a function, an object can be returned. The object, called an error, contains information about the error, including its type and a message.\nFunctions    Function Description     code Return the error code.   msg Return the error message.    Related functions    Function Description     err Initialize a new error.   raise Raise an error.   try Try a statement and catch if an error is raised.    Build-in errors See errors for a list of all the build-in error type.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/error/code/",
	"title": "code",
	"tags": [],
	"description": "",
	"content": "Returns the error code of an error type.\nThis function does not generate an event.\nFunction error.code()\nArguments None\nReturn value Returns error code of an error.\nExample  This code uses code() to return the error code for an error:\n type_err(\u0026quot;incorrect type\u0026quot;).code();  Return value in JSON format\n -61 "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/error/msg/",
	"title": "msg",
	"tags": [],
	"description": "",
	"content": "Returns the error message of an error type.\nThis function does not generate an event.\nFunction error.msg()\nArguments None\nReturn value Returns error message of an error.\nExample  This code uses code() to return the error code for an error:\n type_err(\u0026quot;incorrect type\u0026quot;).msg();  Return value in JSON format\n \u0026#34;incorrect type\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/float/",
	"title": "float",
	"tags": [],
	"description": "",
	"content": "ThingsDB uses 64bit to store float values and has support for the e notation and special float values like inf, -inf and nan.\nUseful functions    Function Description     float return a float type for a given value.   isfloat check if the given value is of the float type.   isinf check if the given value is infinite.   isnan check if the given value is not-a-number.     This code creates a float property plank_constant to collection stuff:\n // Assign property `plank_constant` .plank_constant = 6.62607004e-34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/info/",
	"title": "info",
	"tags": [],
	"description": "",
	"content": "This is a special type within ThingsDB and is returned by all the *_info() functions.\nAs an example we can take the node_info and view the type. This will tell us that the value is indeed of the info type.\n// get the current node info node_info = node_info(); // return the type as string to verify this is indeed the `info` type type(node_info);  Return value in JSON format\n \u0026#34;info\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/int/",
	"title": "int",
	"tags": [],
	"description": "",
	"content": "ThingsDB can store 64bit signed integer values. When assigning integer values larger than 64bit, an overflow_err() will be returned. Other types can be converted to int by using the int function.\nNotations    Base Example Description     2 0b1111011 Binary notation starts with 0b (zero, lower case b), followed by binary digits (0-1).   8 0o173 Octal notation starts with 0o (zero, lower case o), followed by octal digits (0-8).   10 123 Decimal notation, numbers between zero and nine (0-9).   16 0x7b Hexadecimal notation start with a 0x (zero, lower case x), followed by hexadecimal digits (0-9, a-f or A-F).     This code creates a int property count to collection stuff:\n .count = 123; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "An empty list can be constructed as follows: list = [];\nNesting is also possible but each nested list will become a tuple which means the \u0026lsquo;list\u0026rsquo; will be immutable. ThingsDB does this because it wants to update all changes to subscribers and finds the subscribers by the parent object where the change is made. Since the parent of a nested \u0026lsquo;list\u0026rsquo; is another list, the thing holding the list would not be found.\nFunctions    Function Description     choice Return a random item from a list.   each Iterate over all items in a list.   every Check if all items pass a given test.   extend Add an array with items to the end of a list and returns the new length.   filter Return a new list with items that passed a given test.   find Return the first item that passed a given test.   findindex Return the index of the first item that passed a given test.   indexof Return the index of a given value, or nil if not found.   len Return the length of the list.   map Return a new list with the results of calling a provided closure on every item.   pop Remove the last item from a list and returns that item.   push Add new items to the end of a list and returns the new length.   reduce Execute a reducer function on each item, resulting in a single output value.   remove Remove the first item that passed a given test and returns that item.   some Check if at least one item passes a given test.   sort Return a new sorted list.   splice Change a list by removing or replacing existing items and/or adding new items.    It is not possible to change a list while the list is in use, for example:\ntmp = [1, 2, 3]; tmp.map(|i| tmp.push(i));\n\u0026hellip;will raise bad_data_err() (cannot change type list while the value is being used)\n Reference versus copy It might be useful to understand when ThingsDB uses a reference to a list, and when it makes copy. As long as a list is used as a variable, then ThingsDB uses a reference to the list. If a list will be assigned to a thing, or if a list which is assigned to a thing, will be assigned to a variable, then a copy will be made. For example:\na = [1, 2]; b = a; // both `a` and `b` are variable so a *reference* is used. .c = a; // `c` is assigned, so a *copy* will be made. a.push(3); // note that `.c` is not affected because `.c` is a *copy*. // Return the values [a, b, .c];  Response in JSON format:\n [ [1, 2, 3], [1, 2, 3], [1, 2] ] The same is true for when a list is used within a closure. For example:\na = []; // `list` assigned to a variable // `a` stays a variable, so a reference will be used a2 = range(3).reduce(|arr, val| {arr.push(val); arr;}, a); // [0, 1, 2] assert (a == a2); // both `a` and `a2` are a reference to the same list  And when a list is assigned to a thing\u0026hellip;\n .b = []; // `list` assigned to a thing // `.b` will be assigned to `arr`, so in the first iteration a *copy* will be made b2 = range(3).reduce(|arr, val| {arr.push(val); arr;}, .b); // [0, 1, 2] assert (.b != b2); // [] != [0, 1, 2] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/choice/",
	"title": "choice",
	"tags": [],
	"description": "",
	"content": "This function returns a pseudo-random item from a list or tuple . The array must contain at least one item, otherwise a lookup_err() is raised.\nThis function does not generate an event.\nFunction array.choice()\nArguments None\nReturn value A pseudo-random item from the array.\nExample  This code shows an example using choice():\n // Returns either `a`, `b` or `c` ['a', 'b', 'c'].choice();  Example return value in JSON format\n \u0026#34;b\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/each/",
	"title": "each",
	"tags": [],
	"description": "",
	"content": "Iterate over all the items in an list or tuple. Use this functions instead of map when you are not interested in the return value.\nThis function does not generate an event.\nFunction array.each(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over all items in the array. Both item and index are optional.    Return value None\nExample  Generate the first n values of the Fibonacci sequence.\n fibonacci = |n| { seq = range(2); // Return the first `n` items when `n` is less or equal to 1. n \u0026lt;= 1 \u0026amp;\u0026amp; return(seq[:n]); // Append the sum of the last two items, and do this `n` minus 2 times. // Function `each` is used since we do not use the return value. range(2, n).each(||seq.push(seq[-2]+seq[-1])); // Return the sequence. seq; }; // Return the first 10 items of the Fibonacci sequence. fibonacci(10);  Return value in JSON format\n [ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/every/",
	"title": "every",
	"tags": [],
	"description": "",
	"content": "This function checks if all items in the list or tuple pass a given test. It returns a boolean value.\nCalling this function on an empty array returns true for any condition!\n This function does not generate an event.\nFunction array.every(callback)\nArguments    Argument Type Description     callback closure Closure to execute on each value until the closure evaluates to false.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over items in the array. Both item and index are optional.    Return value Returns true if every item in the array satisfies the check in the callback function. Otherwise, false.\nExample  This code shows an example using every():\n a = [12, 5, 8, 130, 44].every(|x| x \u0026gt;= 10); // false b = [12, 54, 18, 130, 44].every(|x| x \u0026gt;= 10); // true // Return both a and b [a, b];  Return value in JSON format\n [ false, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/extend/",
	"title": "extend",
	"tags": [],
	"description": "",
	"content": "Adds a list or tuple with items to the end of a list, and returns the new length.\nThis function generates an event (except when called on a variable).\nFunction list.extend(list)\nArguments    Argument Type Description     list list/tuple The list or tuple to extend the list with.    Return value Returns the new length of the list.\nExample  This code extends a list with a given array:\n a = [1, 2, 3]; b = [4, 5, 6]; a.extend(b); // returns the new length, 6 a;  Return value in JSON format\n [ 1, 2, 3, 4, 5, 6 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/filter/",
	"title": "filter",
	"tags": [],
	"description": "",
	"content": "The function returns a new list with items that pass the test.\nThis function does not generate an event.\nFunction array.filter(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over all items in the array. Both item and index are optional.    Return value A new list with the items that pass the test. If no items passed the test, an empty list will be returned.\nExample  This code shows an example using filter():\n users = [{name: 'Iris', age: 6}, {name: 'Sasha', age: 34}]; /* * Return all users with age 18 or above */ users.filter(|user| user.age \u0026gt;= 18);  Return value in JSON format\n [ { \u0026#34;age\u0026#34;: 34, \u0026#34;name\u0026#34;: \u0026#34;Sasha\u0026#34; } ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/find/",
	"title": "find",
	"tags": [],
	"description": "",
	"content": "This function returns the value of the first item in the list or tuple that passes the test. Otherwise nil is returned if no alternative return value is specified.\nThis function does not generate an event.\nFunction array.find(callback, [alt])\nArguments    Argument Type Description     callback closure Closure to execute on each value until the closure evaluates to true.   alt any (optional) Alternative value which is returned if no item has passed the callback test.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over items in the array. Both item and index are optional.    The alt argument will be lazily evaluated. Consider the following example:\nelems.find(|e| e.name == \u0026quot;foo\u0026quot;, items.pop());\nHere, the item will only be popped, in case e with name foo is not found in elems.\n Return value The value of the first item in the array that passes the test; otherwise, nil or a specified alternative value is returned.\nExample  This code shows an example using find():\n users.find(|user| user.name.startswith('Jeroen'));  Example return value in JSON format\n { \u0026#34;#\u0026#34;: 16, \u0026#34;email\u0026#34;: \u0026#34;jeroen@transceptor.technology\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Jeroen van der Heijden\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/findindex/",
	"title": "findindex",
	"tags": [],
	"description": "",
	"content": "This function returns the index of the first item in a list or tuple that passes the test. Otherwise nil is returned.\nThis function does not generate an event.\nFunction array.findindex(callback)\nArguments    Argument Type Description     callback closure The statement to try.    Explanation of the callback argument:\n   Iterable Callback arguments Description     array item, index Iterate over items in the array. Both item and index are optional.    Return value The index of the first item in the array that passes the test; otherwise, nil is returned.\nExample  This code shows an example using findindex():\n // some sports as an example sports = ['cycling', 'baseball', 'running', 'tennis', 'skateboarding']; // return the index of `running` in list sports.findindex(|sport| sport == 'running');  Return value in JSON format\n 2 "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/indexof/",
	"title": "indexof",
	"tags": [],
	"description": "",
	"content": "The function returns the first index of the item in a list or tuple that matches the provided value, otherwise nil if it is not present. The index of an array starts at 0, so the first item has index 0 the second 1 and so on.\nThis function does not generate an event.\nFunction array.indexof(value)\nArguments    Argument Type Description     value any The value to find the index for.    Return value Index at which the first item matches a given value, or nil if it is not present.\nExample  This code shows an example using indexof():\n [\u0026quot;January\u0026quot;, \u0026quot;February\u0026quot;, \u0026quot;March\u0026quot;, \u0026quot;April\u0026quot;].indexof(\u0026quot;March\u0026quot;);  Return value in JSON format\n 2 "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/len/",
	"title": "len",
	"tags": [],
	"description": "",
	"content": "Returns the length of a list or tuple.\nThis function does not generate an event.\nFunction array.len()\nArguments None\nReturn value Returns length of the array.\nExample  This code uses len() to return the number of items in a collection:\n [1, 2, 3, 4].len();  Return value in JSON format\n 4 "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/map/",
	"title": "map",
	"tags": [],
	"description": "",
	"content": "The function iterates over items in an list or tuple and returns a new list based on the results of a given callback function.\nThis function does not generate an event.\nFunction array.map(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over all items in the array. Both item and index are optional.    Return value A new list of items that are the result of the callback function.\nExample  This code shows an example using map():\n users = [{name: \u0026quot;Iris\u0026quot;, age: 6}, {name: \u0026quot;Sasha\u0026quot;, age: 34}]; // returns [\u0026quot;Iris\u0026quot;, \u0026quot;Sasha\u0026quot;] users.map(|user| user.name);  Return value in JSON format\n [ \u0026#34;Iris\u0026#34;, \u0026#34;Sasha\u0026#34; ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/pop/",
	"title": "pop",
	"tags": [],
	"description": "",
	"content": "Removes the last item from a list and returns that item.\nThis function changes the length of the list. The pop() function works on a list type array, but not on a tuple since tuples are immutable.\nThis function generates an event (except when called on a variable).\nFunction list.pop()\nArguments None\nReturn value The removed item from the list. A lookup_err() is raised if the list is empty.\nExample  This code show an example usage of pop():\n (list = [1, 2, 3]).pop(); // 3 list;  Return value in JSON format\n [ 1, 2 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/push/",
	"title": "push",
	"tags": [],
	"description": "",
	"content": "Adds new items to the end of a list, and returns the new length.\nThis function generates an event (except when called on a variable).\nFunction list.push(item1, item2, ..., itemX)\nReturn value Returns the new length of the list.\nExample  This code pushes values to a list:\n list = [1, 2, 3]; list.push(4, 5, 6); // Returns the new length, 6 list;  Return value in JSON format\n [1, 2, 3, 4, 5, 6] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/reduce/",
	"title": "reduce",
	"tags": [],
	"description": "",
	"content": "Executes a given reducer closure on every item of the list, accumulating to a single return value.\nThis function does not generate an event.\nFunction array.reduce(reducer, [initial])\nArguments    Argument Type Description     reducer closure (required) Closure to execute on every value (except for the first, if no initial value is provided).   initial any (optional) The initial value serves as the first argument of the callback during the first call. If no initial value is provided, the first item in the array will be used instead and not processed by the callback. Calling reduce() on an empty list without an initial value will raise a lookup_err().    The reducer argument takes three optional arguments:\n   Argument Description     (0) accumulator An accumulated value that is returned by the previously invoked callback—or initial value.   (1) current The current item in the list that is being processed by the callback.   (2) index The index of the current item in the list that is being processed by the callback. If an initial value is given, it start from index 0, else, it starts from index 1.    Return value The single value that results from the reduction.\nExamples  Sum all the values of a list:\n [0, 1, 2, 3].reduce(|a, b| a+b);  Return value in JSON format\n 6  Sum values in a thing list:\n // An initial value is required [{x: 1}, {x: 2}, {x: 3}].reduce(|a, b| a+b.x, 0);  Return value in JSON format\n 6  Flatten a list with tuples:\n // Use an empty list as initial value [[1, 2], [3, 4], [5, 6]].reduce(|a, b| {a.extend(b); a}, []);  Return value in JSON format\n [1, 2, 3, 4, 5, 6] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/remove/",
	"title": "remove",
	"tags": [],
	"description": "",
	"content": "This function removes and returns the value of the first item in the list that satisfies the callback function. Otherwise nil is returned if no alternative return value is specified.\nThis function generates an event (except when called on a variable).\nFunction list.remove(callback, [alt])\nArguments    Argument Type Description     callback closure Closure to execute on each value until the closure evaluates to true.   alt any (optional) Alternative value which is returned if no item has passed the callback test.    Explanation of the callback argument:\n   Iterable Arguments Description     list item, index Iterate over items in the list. Both item and index are optional.    The alt argument will be lazily evaluated. Consider the following example:\nelems.remove(|e| (e.name == \u0026quot;foo\u0026quot;), items.pop());\nHere, the item will only be popped, in case e with name foo is not found in elems.\n Return value The value of the first item in the list that satisfies the provided testing function; otherwise, nil or a specified alternative value is returned.\nExample  This code shows an example using remove() on a list:\n tmp = [1, 2, 3, 4]; [ tmp.remove(|x| (x % 2 == 0)), tmp, ];  Return value in JSON format\n [ 2, [ 1, 3, 4 ] ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/some/",
	"title": "some",
	"tags": [],
	"description": "",
	"content": "This function checks if at least one item in the list or tuple passes a given test. It returns a boolean value.\nCalling this function on an empty array returns false for any condition!\n This function does not generate an event.\nFunction array.some(callback)\nArguments    Argument Type Description     callback closure Closure to execute on each value until the closure evaluates to true.    Explanation of the callback argument:\n   Iterable Arguments Description     array item, index Iterate over items in the array. Both item and index are optional.    Return value Returns true if at least one item in the array satisfies the check in the callback function. Otherwise, false.\nExample  This code shows an example using some():\n a = [2, 5, 8, 1, 4].some(|x| x \u0026gt;= 10); // false b = [12, 5, 8, 1, 4].some(|x| x \u0026gt;= 10); // true // Return both a and b [a, b];  Return value in JSON format\n [ false, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/sort/",
	"title": "sort",
	"tags": [],
	"description": "",
	"content": "When this function is used on a list or tuple, a new sorted list is returned.\nThis function does not generate an event.\nFunction array.sort([closure, [reverse]])\nArguments    Argument Type Description     callback closure (optional) Closure to execute on each value, which is used to determine how the list should be sorted.   reverse bool (optional) Determines the order of the returned list.    The reverse argument cannot be used together with a closure which takes two arguments. In this case the order should be specified within the closure.\n Return value A new sorted list.\nExamples  Simple sort\n // return a new list in ascending order [3, 1, 2].sort();  Return value in JSON format\n [ 1, 2, 3 ] With the reverse argument set to true, a new list will be returned in descending order.\n Reverse sort\n // return a new list in descending order [3, 1, 2].sort(true);  Return value in JSON format\n [ 3, 2, 1 ] When using a closure the sort behavior depends on the number of arguments the closure accepts. With one argument, each item in the list will be passed to the closure and the return value of the closure will be used to compare. Below is an example which uses such a closure to do a case-insensitive sort. Another common use case is when you want to sort things based on a property. For example a closure like |u| u.age could be used to sort users based on an age property.\n Sort using an one-argument callback\n // return a new list in ascending order, case-insensitive [\u0026quot;charlie\u0026quot;, \u0026quot;alpha\u0026quot;, \u0026quot;Beta\u0026quot;].sort(|s| s.lower());  Return value in JSON format\n [ \u0026#34;alpha\u0026#34;, \u0026#34;Beta\u0026#34;, \u0026#34;charlie\u0026#34; ] As a second option the sort function can accept a closure with two arguments. The return value of the given closure must return an integer value. When this value is \u0026lt; 0 then a goes before b, when 0 then both a and b are considered equal, and when \u0026gt;0 then a goes after b.\n Sort using a two-argument callback\n // list with `nil` values arr = [nil, \u0026quot;charlie\u0026quot;, nil, \u0026quot;alpha\u0026quot;, \u0026quot;beta\u0026quot;]; // return a new list in ascending order with `nil` values at the end arr.sort(|a, b| isnil(a) ? 1 : isnil(b) ? -1 : a \u0026lt; b ? -1 : a \u0026gt; b ? 1 : 0);  Return value in JSON format\n [ \u0026#34;alpha\u0026#34;, \u0026#34;beta\u0026#34;, \u0026#34;charlie\u0026#34;, null, null ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/list/splice/",
	"title": "splice",
	"tags": [],
	"description": "",
	"content": "The splice() function changes a list by removing or replacing existing items and/or adding new items.\nThis function generates an event (except when called on a variable).\nFunction list.splice(start, [delete_count, [item1, item2, ..., itemX]]))`\nArguments    Argument Type Description     start int (required) Start index in the list. If it is negative, it will start that many items from the end of the list.   delete_count int (optional) Number of item to remove from thestart of the list. If \u0026lt;= 0, no items will be removed.   item1, item2, \u0026hellip;, itemX any (optional) Items to add, beginning from the startof the list.    Return value A list containing the deleted items.\nExample  This code replaces an item in a list at position 2:\n months = ['Jan', 'Feb', 'April']; months.splice(2, 1, 'March'); /* Returns: ['April'] */ months;  Return value in JSON format\n [ \u0026#34;Jan\u0026#34;, \u0026#34;Feb\u0026#34;, \u0026#34;March\u0026#34; ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/nil/",
	"title": "nil",
	"tags": [],
	"description": "",
	"content": "Probably the most simple type, it can be used as no value.\nIt might be convenient to use nil as the last statement in a query to prevent returning data which is not required. See the code example.\n This code uses nil to prevent returning unused data:\n my_array = [1, 2, 3, 42]; nil; /* without nil, the array above would be returned */  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/regex/",
	"title": "regex",
	"tags": [],
	"description": "",
	"content": "Regular expression can be constructed using a literal which consists of a pattern enclosed between slashes, as follows: re = /ab+c/;. It is probably a good idea to store a regex in a variable if you plan to use the regular expression multiple times. This prevents the requirement to compile the regular expression each time.\nFunctions that use regular expressions    Function Description     test A str functiontrue or false.     This code uses a regular expression for an oversimplified email check:\n // Note: the email check is oversimplified, do not use in production email_test = /^\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/; /* example usage of our 'email_test' */ email = 'info@thingsdb.net'; email.test( email_test );  Return value in JSON format\n true "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/",
	"title": "set",
	"tags": [],
	"description": "",
	"content": "A set is a collection which is unordered and can only contain things. Each thing will only exists once in a collection.\nFunctions    Function Description     add Add things to a set.   each Iterate over all items in a set.   every Check if all things pass a given test.   filter Return a new set with things that pass a given test.   find Return the first thing which passes a given test.   has Test if a set contains a given thing.   len Return the length of a set.   map Return a list with the results of calling a provided closure on every thing.   reduce Execute a reducer function on each thing, resulting in a single output value.   remove Remove things from a set.   some Check if at least one thing passes a given test.    Operators    Operation Description     | (union) Set with things from both a and b.   \u0026amp; (intersection) Set with things common to a and b.   - (difference) Set with things in a but not in b.   ^ (symmetric difference) Set with things in either a or b but not both.     Example set operators\n anna = {}; cato = {}; iris = {}; a = set(cato, iris); b = set(cato, anna); assert (a | b == set(anna, cato, iris)); // Union assert (a \u0026amp; b == set(cato)); // Intersection assert (a - b == set(iris)); // Difference assert (a ^ b == set(anna, iris)); // Symmetric difference  Be careful using assignment operators on stored sets. Although set operations are processed very efficient, a change to a stored set requires an event. This event is still an assignment and will therefore contain the complete resulting set.\nIn practice this means that it is perfect to write something like set_a |= set_b, but avoid using a stored set like .set_a |= set_b.\n Related functions    Function Description     set Create a new empty set or convert a list to a new set.    "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "Adds a new thing to the set and returns the number of things which are actually added to the set. For example my_set.add(#42); will return 0 if my_set already contains thing #42.\nThis function generates an event (except when called on a variable).\nFunction set.add(thing1, thing1, ..., thingX)\nReturn value Returns the number of things which are added to the set.\nExample  This code adds things to a set:\n s = set(); a = {item: 'a'}; b = {item: 'b'}; // add both `a` and `b` to set `s`; note that `a` is only added once; s.add(a, a, b);  Return value in JSON format\n 2 "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/each/",
	"title": "each",
	"tags": [],
	"description": "",
	"content": "Iterate over items in a set.\nBe aware that the order when iterating over a set or a thing is not guaranteed.\n This function does not generate an event.\nFunction set.each(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     set thing, id Iterate over things in the set. Both thing and id are optional.    Return value None\nExample  This code shows an example using each():\n users = set( {name: \u0026quot;Iris\u0026quot;, age: 6}, {name: \u0026quot;Sasha\u0026quot;, age: 34} ); // Just an example, the same could be achieved using `filter` and `map`. old_enough = []; users.each(|user| user.age \u0026gt;= 18 \u0026amp;\u0026amp; old_enough.push(user.name)); // Return all the names of user which are old enough: old_enough;  Return value in JSON format\n [ \u0026#34;Sasha\u0026#34; ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/every/",
	"title": "every",
	"tags": [],
	"description": "",
	"content": "This function checks if all things in the set pass a given test. It returns a boolean value.\nCalling this function on an empty set returns true for any condition!\n This function does not generate an event.\nFunction set.every(callback)\nArguments    Argument Type Description     callback closure Closure to execute on each thing until the closure evaluates to false.    Explanation of the callback argument:\n   Iterable Arguments Description     set thing, id Iterate over things in the set. Both thing and id are optional.    Return value Returns true if every thing in the set satisfies the check in the callback function. Otherwise, false.\nExample  This code shows an example using every():\n users = set({ name: 'Iris', age: 7, }, { name: 'Tess', age: 6 }); a = users.every(|user| user.age \u0026gt; 6); // false b = users.every(|user| user.age \u0026gt; 3); // true // Return both a and b [a, b];  Return value in JSON format\n [ false, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/filter/",
	"title": "filter",
	"tags": [],
	"description": "",
	"content": "The function returns a new set with things that pass the test.\nThis function does not generate an event.\nFunction set.filter(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     set thing, id Iterate over things in the set. Both thing and id are optional.    Return value A new set with the things that pass the test. If no items passed the test, an empty set will be returned.\nExample  This code shows an example using filter():\n users = set({name: 'Iris', age: 6}, {name: 'Sasha', age: 34}); /* * Return all users with name 'Iris'. */ users.filter(|user| (user.name == 'Iris'));  Return value in JSON format\n [ { \u0026#34;age\u0026#34;: 6, \u0026#34;name\u0026#34;: \u0026#34;Iris\u0026#34; } ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/find/",
	"title": "find",
	"tags": [],
	"description": "",
	"content": "This function returns the value of the first item in the set that passes the test. Otherwise nil is returned if no alternative return value is specified.\nThis function does not generate an event.\nThe return value when called on a set might be unpredictable since a set is not ordered.\nset({name: 'Iris'}, {name: 'Cato'}).find(||true);\n\u0026hellip;will return {Iris} or {Cato}.\n Function set.find(callback, [alt])\nArguments    Argument Type Description     callback closure Closure to execute on each value until the closure evaluates to true.   alt any (optional) Alternative value which is returned if no item has passed the callback test.    Explanation of the callback argument:\n   Iterable Arguments Description     set thing, id Iterate over things in the set. Both thing and id are optional.    The alt argument will be lazily evaluated. Consider the following example:\nelems.find(|e| (e.name == \u0026quot;foo\u0026quot;), items.pop());\nHere, the item will only be popped, in case e with name foo is not found in elems.\n Return value The value of the first item in the set that passes the test; otherwise, nil or a specified alternative value is returned.\nExample  This code shows an example using find():\n users.find(|user| user.name.startswith('Jeroen'));  Example return value in JSON format\n { \u0026#34;#\u0026#34;: 16, \u0026#34;email\u0026#34;: \u0026#34;jeroen@transceptor.technology\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Jeroen van der Heijden\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/has/",
	"title": "has",
	"tags": [],
	"description": "",
	"content": "Determines if a set has a given thing.\nThis function does not generate an event.\nFunction set.has(thing)\nArguments    Argument Type Description     thing thing (required) Thing to check.    Return value Returns true if the given thing is found in the set and otherwise false.\nExample  This code shows an example use case of has():\n iris = {name: 'Iris'}; s = set(iris); /* Check if iris is in set `s` */ s.has(iris);  Return value in JSON format\n true "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/len/",
	"title": "len",
	"tags": [],
	"description": "",
	"content": "Returns the length of a set.\nThis function does not generate an event.\nFunction set.len()\nArguments None\nReturn value Returns length of the set.\nExample  This code uses len() to return the number of items in a set:\n set({item: 'a'}, {item: 'b'}).len();  Return value in JSON format\n 2 "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/map/",
	"title": "map",
	"tags": [],
	"description": "",
	"content": "The function iterates over items in a set and returns a new list based on the results of a given callback function.\nBe aware that the order when iterating over a set or a thing is not guaranteed.\n This function does not generate an event.\nFunction set.map(callback)\nArguments Explanation of the callback argument:\n   Iterable Arguments Description     set thing, id Iterate over things in the set. Both thing and id are optional.    Return value A new list of items that are the result of the callback function.\nExample  This code shows an example using map():\n users = [{name: \u0026quot;Iris\u0026quot;, age: 6}, {name: \u0026quot;Sasha\u0026quot;, age: 34}]; // returns [\u0026quot;Iris\u0026quot;, \u0026quot;Sasha\u0026quot;] set(users).map(|user| user.name).sort();  Return value in JSON format\n [ \u0026#34;Iris\u0026#34;, \u0026#34;Sasha\u0026#34; ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/reduce/",
	"title": "reduce",
	"tags": [],
	"description": "",
	"content": "Executes a given reducer closure on every thing in the set, accumulating to a single return value.\nA set is unordered and therefore the order how things are processed by the reducer might be different from what you expect.\n This function does not generate an event.\nFunction set.reduce(reducer, [initial])\nArguments    Argument Type Description     reducer closure (required) Closure to execute on every thing (except for the first, if no initial value is provided).   initial any (optional) The initial value serves as the first argument of the callback during the first call. If no initial value is provided, the first thing in the set will be used instead and not processed by the callback. Calling reduce() on an empty set without an initial value will raise a lookup_err().    The reducer argument takes three optional arguments:\n   Argument Description     (0) accumulator An accumulated value that is returned by the previously invoked callback—or initial value.   (1) current The current thing in the set that is being processed by the callback.   (2) id ID of the current thing in the set that is being processed by the callback.    Return value The single value that results from the reduction.\nExamples  Sum all the values of a list:\n users = set({ name: 'Iris', age: 7, }, { name: 'Tess', age: 6 }); users.reduce(|total, user| total + user.age, 0);  Return value in JSON format\n 13 "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/remove/",
	"title": "remove",
	"tags": [],
	"description": "",
	"content": "This function can be used to remove things from a set.\nIf a closure is used, then all things that satisfy the test are removed from the set and returned as list. The order of the removed things is not guaranteed since the set itself is unordered.\nIt is also possible to specify things as arguments. In this case a list is returned with all the things which are removed from the set, in the order that the arguments are used. Things which are not found in the set are ignored.\nThis function generates an event (except when called on a variable).\nFunction set.remove(callback)\nOr\nset.remove(thing1, thing2, ..., thingX)\nArguments Explanation of the callback argument:\n   Iterable Arguments Description     set thing, thing ID Iterate over things in the set. Both thing and thing ID are optional.    Return value A list with the removed things from the set or an empty list if nothing is removed.\nExample  This code shows an example using remove() on a set:\n t1 = {x:1}; t2 = {x:2}; t3 = {x:3}; t4 = {x:4}; s = set(t1, t2, t3, t4); [ s.remove(|t| t.x \u0026lt; 3), s.remove(t1, t2, t3, t4), ]  Example return value in JSON format\n [ [ { \u0026#34;x\u0026#34;: 1 }, { \u0026#34;x\u0026#34;: 2 } ], [ { \u0026#34;x\u0026#34;: 3 }, { \u0026#34;x\u0026#34;: 4 } ] ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/set/some/",
	"title": "some",
	"tags": [],
	"description": "",
	"content": "This function checks if at least one thing in the set passes a given test. It returns a boolean value.\nCalling this function on an empty set returns false for any condition!\n This function does not generate an event.\nFunction set.some(callback)\nArguments    Argument Type Description     callback closure Closure to execute on each thing until the closure evaluates to true.    Explanation of the callback argument:\n   Iterable Arguments Description     set thing, id Iterate over things in the set. Both thing and id are optional.    Return value Returns true if at least one thing in the set satisfies the check in the callback function. Otherwise, false.\nExample  This code shows an example using some():\n users = set({ name: 'Iris', age: 7, }, { name: 'Tess', age: 6 }); a = users.some(|user| user.age \u0026gt; 18); // false b = users.some(|user| user.age \u0026gt; 6); // true // Return both a and b [a, b];  Return value in JSON format\n [ false, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/str/",
	"title": "str",
	"tags": [],
	"description": "",
	"content": "This is the string type of ThingsDB. A value of type str should contain valid UTF-8 characters. This is not guaranteed but rather depends on MessagePack to pack data correctly. There is an isutf8 function which can be used to test a str value for valid UTF-8 data and it is also possible to create an utf8 property on a custom Type which only allows strings with valid UTF-8 data.\nFunctions    Function Description     contains Determine if a given string is a substring of a string.   endswith Determine if a string ends with characters given by another string.   len Return the length of a string.   lower Return a new string in which all case-based characters are in lower case.   startswith Determine if a string starts with characters given by another string.   test Test if a string matches a given regular expression and return true or false.   upper Return a new string in which all case-based characters are in upper case.     This code creates a raw property greet to collection stuff:\n .greet = 'Hello world!!'; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/str/contains/",
	"title": "contains",
	"tags": [],
	"description": "",
	"content": "Determines if a given string is a substring of a string.\nThis function does not generate an event.\nFunction str.contains(search_string)\nArguments    Argument Type Description     search_string str (required) The characters to be searched for in the string.    Return value Returns true if the given characters are found as a substring and otherwise false.\nExample  This code shows an example using contains():\n 'the answer to life the universe and everything'.contains('life');  Return value in JSON format\n true "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/str/endswith/",
	"title": "endswith",
	"tags": [],
	"description": "",
	"content": "Determines if a string ends with characters given by another string.\nThis function does not generate an event.\nFunction str.endswith(search_string)\nArguments    Argument Type Description     search_string str (required) The characters to be searched for at the end of this string.    Return value Returns true if the given characters are found at the end of the string and otherwise false.\nExample  This code shows an example using endswith():\n 'the answer to life the universe and everything'.endswith('everything');  Return value in JSON format\n true "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/str/len/",
	"title": "len",
	"tags": [],
	"description": "",
	"content": "Returns the length of a string.\nBe aware that the length represents the number of bytes and not the number of characters. see example below.\n This function does not generate an event.\nFunction str.len()\nArguments None\nReturn value Returns length of the string.\nExample  This code uses len() to return the length of a string:\n [ {'Hello'.len(); /* 5 bytes */ }, {'π'.len(); /* 2 bytes, not 1 */ }, ]  Return value in JSON format\n [ 5, 2 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/str/lower/",
	"title": "lower",
	"tags": [],
	"description": "",
	"content": "Return a new string in which all case-based characters are in lower case.\nThis function does not generate an event.\nFunction str.lower()\nArguments None\nReturn value Returns a new string with all characters in lower case.\nExample  Example using lower():\n 'Hello World!!'.lower();  Return value in JSON format\n \u0026#34;hello world!!\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/str/startswith/",
	"title": "startswith",
	"tags": [],
	"description": "",
	"content": "Determines if a string starts with characters given by another string.\nThis function does not generate an event.\nFunction str.startswith(search_string)\nArguments    Argument Type Description     search_string str (required) The characters to be searched for at the start of this string.    Return value Returns true if the given characters are found at the start of the string and otherwise false.\nExample  This code shows an example using startswith():\n 'the answer to life the universe and everything'.startswith('the answer');  Return value in JSON format\n true "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/str/test/",
	"title": "test",
	"tags": [],
	"description": "",
	"content": "Test if a string matches a given regular expression and return true or false.\nThis function does not generate an event.\nFunction str.test(regex)\nArguments    Argument Type Description     regex regex (required) The regular expression to test against the string.    Return value true if there is a match between the string and the specified regular expression, otherwise false.\nExample  Examples using test():\n [ 'Hello world!!'.test(/^hello/), 'Hello world!!'.test(/^hello/i), ];  Return value in JSON format\n [ false, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/str/upper/",
	"title": "upper",
	"tags": [],
	"description": "",
	"content": "Return a new string in which all case-based characters are in upper case.\nThis function does not generate an event.\nFunction str.upper()\nArguments None\nReturn value Returns a new string with all characters in upper case.\nExample  Example using upper():\n 'Hello World!!'.upper();  Return value in JSON format\n \u0026#34;HELLO WORLD!!\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/",
	"title": "thing",
	"tags": [],
	"description": "",
	"content": "Functions    Function Description     assign Copies properties from a thing.   del Remove a property.   each Iterate over all properties of a thing.   emit Emit an event to all watchers of a thing.   filter Return a new thing with properties that pass a given test.   get Return the value of a property on a thing by a given property name.   has Determine if a thing has a given property.   id Return the id.   keys Return a list with all the property names of a thing.   len Return the number of items.   map Return a list with the results of calling a provided closure on every property.   set Create a new property on a thing.   unwatch Stop watching the thing for mutations.   values Return a list with all the property values of a thing.   watch Watch the thing for mutations.   wrap Wrap the thing with a Type.    "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/assign/",
	"title": "assign",
	"tags": [],
	"description": "",
	"content": "Copies properties from a given thing. Existing properties will be overwritten and new properties will be added. If this function is used on an instance of a custom Type, all properties of the source must be valid according the type specification, otherwise an exception will be raised and no properties will be copied.\nThis function generates an event.\nFunction thing.assign(source)\nArguments    Argument Type Description     source thing (required) Thing from which the properties are copied.    Return value Returns the thing to which the properties are assigned.\nExample  This code shows an example using assign():\n scores = { iris: 10, job: 20 }; scores.assign({ job: 80, tijs: 90 });  Return value in JSON format\n { \u0026#34;iris\u0026#34;: 10, \u0026#34;job\u0026#34;: 80, \u0026#34;tijs\u0026#34;: 90 } "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/del/",
	"title": "del",
	"tags": [],
	"description": "",
	"content": "Delete a property from a thing.\nWhile almost all functions on things are also available on Type instances, this one is not. This is because a Type instance has a fixed set of properties and so you are not allowed to delete one of them on a single instance. Use mod_type() instead, to delete the property from all instances if this is what you want.\n This function generates an event.\nFunction thing.del(property)\nArguments    Argument Type Description     property str (required) Name of the property to delete.    Return value Returns the removed value if successful. A lookup_err() is returned if the property does not exist or bad_data_err() in case the given property is not a valid name.\nIn versions before v0.9.3 the return value of .del(..) used to be nil when successful.\n Example  This code shows some return values for del():\n .x = 'create and delete this prop'; .del('x');  Return value in JSON format\n \u0026#34;create and delete this prop\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/each/",
	"title": "each",
	"tags": [],
	"description": "",
	"content": "Iterate over all properties on a thing.\nBe aware that the order when iterating over a thing is not guaranteed.\n This function does not generate an event.\nFunction thing.each(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     thing name, value Iterate over the thing properties. Both name and value are optional.    Return value None\nExample  This code shows an example using each():\n scores = { cato: 99, iris: 110, job: 170, sasha: 67, tijs: 159, }; // Just an example, the same could be achieved using `filter` and `map`. above100 = []; scores.each(|name, score| score \u0026gt; 100 \u0026amp;\u0026amp; above100.push(name) ); // Return all players with a score above 100 above100;  Return value in JSON format\n [ \u0026#34;iris\u0026#34;, \u0026#34;job\u0026#34;, \u0026#34;tijs\u0026#34; ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/emit/",
	"title": "emit",
	"tags": [],
	"description": "",
	"content": "Emit an event to all watchers of a thing. The event is a string value which you are free to choose. It is possible, but not required, to send extra arguments with the event.\nWhen you emit an event, the event is handled by ThingsDB just as any other event and thus the order in which they are send to the client is guaranteed.\n This function generates an event.\nUsing events enables a user to write code like this example of a ChatRoom in the Python language:\nclass ChatRoom(Thing): @event(\u0026#39;message/new\u0026#39;) def on_new_message(self, msg): pass # do something with the message Function thing.emit(event, ...)\nArguments    Argument Type Description     event str (required) Event name to emit.   \u0026hellip; any (optional) Arguments send together with the event.    Return value None\nExample  This code shows an example using emit():\n .emit('new/message', 'Hello Everyone!');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/filter/",
	"title": "filter",
	"tags": [],
	"description": "",
	"content": "The function returns a new thing with properties that pass the test.\nThis function does not generate an event.\nFunction thing.filter(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     thing name, value Iterate over the thing properties. Both name and value are optional.    Return value A new thing with the properties that pass the test. If no properties pass the test, a empty thing will be returned.\nExample  This code shows an example using filter():\n user = {name: 'Iris', age: 6}; /* * Return a thing with only property age */ user.filter(|prop| prop == 'age');  Return value in JSON format\n { \u0026#34;age\u0026#34;: 6 } "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/get/",
	"title": "get",
	"tags": [],
	"description": "",
	"content": "Return the value of a property on a thing by a given property name. If the property is not found then the return value will be nil, unless an alternative return value is given.\nThis function does not generate an event.\nFunction thing.get(name [, alt])\nArguments    Argument Type Description     name str (required) Name of the property where to return the value for.   alt any (optional) Optional return value.    Return value Returns the value for the given property name. If the property is not found the the return value will be nil unless an alternative return value is given as second argument.\nExample  This code shows an example use case of get():\n tmp = {name: 'Iris'}; tmp.get('name');  Return value in JSON format\n \u0026#34;Iris\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/has/",
	"title": "has",
	"tags": [],
	"description": "",
	"content": "Determines if a thing has a given property.\nThis function does not generate an event.\nFunction thing.has(name)\nArguments    Argument Type Description     name str (required) Name of the property to check.    Return value Returns true when the given property name is found and otherwise false.\nExample  This code shows an example use case of has():\n tmp = {name: 'Iris'}; /* Check if `tmp` has a property `name` */ tmp.has('name');  Return value in JSON format\n true "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/id/",
	"title": "id",
	"tags": [],
	"description": "",
	"content": "Returns the id of a thing or nil if the thing is not stored.\nThis function does not generate an event.\nFunction thing.id()\nArguments None\nReturn value Returns id of a thing or nil when the thing is not stored.\nExample  This code uses id() to return a collection id:\n .id(); // Returns the collection id  Example return value in JSON format\n 3 "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/keys/",
	"title": "keys",
	"tags": [],
	"description": "",
	"content": "keys The function returns a list with all the property names of a thing. The same could be returned using map so the following statement is true:\n.keys() == .map(|k| k)\nAlthough the keys() and map() functions in the example above will return a list with the same order, the order of keys in the list is not guaranteed and may be different each time you run the query.\n This function does not generate an event.\nFunction thing.keys()\nArguments None\nReturn value Returns a list with property names.\nExample  This code shows how to use keys():\n {a: 1, b: 2, c: 3}.keys();  Return value in JSON format (Warning: the order is NOT guaranteed)\n [ \u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34; ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/len/",
	"title": "len",
	"tags": [],
	"description": "",
	"content": "Returns the number of items in a thing.\nThis function does not generate an event.\nFunction thing.len()\nArguments None\nReturn value Returns the number of items in a thing.\nExample  This code uses len() to return the number of items in a thing:\n {name: 'Iris', age: 6}.len();  Return value in JSON format\n 2 "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/map/",
	"title": "map",
	"tags": [],
	"description": "",
	"content": "The function iterates over all properties on a thing and returns a new list based on the results of a given callback function.\nBe aware that the order when iterating over a thing is not guaranteed.\n This function does not generate an event.\nFunction thing.map(callback)\nArguments    Argument Type Description     callback closure (required) Closure to execute on each value.    Explanation of the callback argument:\n   Iterable Arguments Description     thing name, value Iterate over the thing properties. Both name and value are optional.    Return value A new list of items that are the result of the callback function.\nExample  This code shows an example using map():\n user = {name: \u0026quot;Iris\u0026quot;, age: 6}; user.map(|property| property.len());  Return value in JSON format\n [ 4, 3 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/set/",
	"title": "set",
	"tags": [],
	"description": "",
	"content": "Creates a new property on a thing. If the property already exists then the old property will be overwritten. This function is equal to an assignment except that it can be used when the name of the property is dynamic.\nThis function generates an event.\nFunction thing.set(name, value)\nArguments    Argument Type Description     name str (required) The name of the property to set.   value any (required) The value which will be assigned to the property.    Return value The value which will be assigned.\nExample  This code shows how to use set():\n [ .set('the_answer', 42), .the_answer, ];  Return value in JSON format\n [ 42, 42 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/unwatch/",
	"title": "unwatch",
	"tags": [],
	"description": "",
	"content": "Stop watching for mutations on a thing. This function returns nil and triggers a stop event, only when the thing was being watched.\nThis function does not generate an event.\nFunction thing.unwatch()\nArguments None\nReturn value Returns nil.\nExample  This code shows how to use unwatch():\n .unwatch();  Return value in JSON format:\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/values/",
	"title": "values",
	"tags": [],
	"description": "",
	"content": "Returns a list with all the property values of a thing. The same could be returned using map so the following statement is true:\n(.values() == .map(|_, v| v))\nAlthough the values() and map() in the example above will return a list with the same order, the order of values in the list is not guaranteed and may be different each time you run the query.\n This function does not generate an event.\nFunction thing.values()\nArguments None\nReturn value Returns a list with property values.\nExample  This code shows how to use values():\n {a: 1, b: 2, c: 3}.values();  Return value in JSON format (Warning: the order is NOT guaranteed)\n [ 1, 2, 3 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/watch/",
	"title": "watch",
	"tags": [],
	"description": "",
	"content": "Subscribe for watching mutations on a stored thing. If this function is called on a thing which is not stored, and therefore has no #ID, then a value_err() is raised. This function returns nil, but every call always triggers an init event, even if it involves multiple calls of this function on the same thing.\nThis function only works with socket connections. When using this function with an HTTP API request, it has no effect.\n This function does not generate an event.\nFunction thing.watch()\nArguments None\nReturn value Returns nil.\nExample  This code shows how to use watch():\n .watch();  Return value in JSON format:\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/thing/wrap/",
	"title": "wrap",
	"tags": [],
	"description": "",
	"content": "Wrap a thing with a another Type to filter out properties, while preserving the ID.\nFor a more advanced example using wrap() and unwrap() see \u0026lt;Type\u0026gt;.\nFunction thing.wrap(Type)\nArguments    Argument Arguments Description     Type str Type\u0026rsquo;s name to wrap the thing with.    Return value A wrapped thing.\nExample  This code shows an example using wrap():\n // Create a Type to return just an email field. set_type('_Email', {email: 'str'}); // Store a thing .joente = { name: 'Jeroen van der Heijden', email: 'jeroen@transceptor.technology', gender: 'male', }; // Return the email field and ID (#) .joente.wrap('_Email');  Example return value in JSON format\n { \u0026#34;#\u0026#34;: 42, \u0026#34;email\u0026#34;: \u0026#34;jeroen@transceptor.technology\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/tuple/",
	"title": "tuple",
	"tags": [],
	"description": "",
	"content": "All nested arrays are immutable and thus tuples.\nlist = []; list.push(['this list will be nested and therefore convert to a tuple']); // Check that the first item in `list` is indeed a `tuple` assert(istuple(list[0])); // Check that the `tuple` is indeed immutable assert(iserr(try(list[0].push('cannot be added to a tuple')))); A tuple only becomes a tuple when it is nested inside another tuple or list, which means the tuple will be immutable. ThingsDB does this to make watching things possible; it wants to update all changes within a thing to the subscribers that are watching, and finds them by thing. Since the parent of a nested tuple is another tuple or list, the watched thing holding the listwith nested lists would not be found.\nAnother property of lists and tuples in ThingsDB is that they both are always copies, and not a reference as in most languages. This is also done to enable watching.\nFunctions    Function Description     choice Return a random item from a tuple.   each Iterate over all items in a tuple.   every Check if all items pass a given test.   filter Return a new list with items that pass a given test.   find Return the first item that pass a given test.   findindex Return the index of the first item that pass a given test.   indexof Return the index of a given value, or nil if not found.   len Return the length of the tuple.   map Return a new list with the results of calling a provided closure on every item.   reduce Execute a reducer function on each item, resulting in a single output value.   some Check if at least one item passes a given test.   sort Return a new sorted list.    The above functions correspond to those of a list. For that reason, they are only listed under the data type list.\n "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/type/",
	"title": "Type",
	"tags": [],
	"description": "",
	"content": "A Type is like a thing with pre-defined properties. When an instance of a Type is created, all defined properties are guaranteed to exist with a value matching the Type definition.\nDefinable properties    definition default description     'str' \u0026quot;\u0026quot; requires type str (values of type str should contain valid UTF-8 characters).   'utf8' \u0026quot;\u0026quot; requires type str and the value must contain valid UTF-8 characters.   'raw' \u0026quot;\u0026quot; requires type str or bytes.   'bytes' bytes() requires type bytes.   'bool' false requires type bool.   'int' 0 requires type int.   'uint' 0 requires a non-negative integer (type int, \u0026gt;= 0).   'pint' 1 requires a positive integer (type int, \u0026gt; 0).   'nint' -1 requires a negative integer (type int, \u0026lt; 0).   'float' 0.0 requires type float.   'number' 0 requires type float or type int.   'thing' {} requires a thing.   'X' X{} requires a instance of Type X. The value X should be replace with the Type name.   '[]' [] requires a list.   '{}' set() requires a set.   'any' nil any type is valid.    Each definition can be made optional by adding a question-mark ? to the definition. If a property is made optional, then the value nil is allowed instead of the given type and nil will also be the default if the property is missing.\n For example\n // Create a new type `User` with an optional property `name`. set_type('User', {name: 'str?'}); // Create a instance of type `User` without a name unknown = User{}; // ..or explicitly set name to `nil` user_nil = User{name: nil}; // ..a `str` is also ok iris = User{name: 'Iris'}; // ..but another type than `str` or `nil` is not allowed assert(iserr(try(User{name: 0}))); // Return the results [unknown, user_nil, iris];  Return value in JSON format\n [ { \u0026#34;name\u0026#34;: null }, { \u0026#34;name\u0026#34;: null }, { \u0026#34;name\u0026#34;: \u0026#34;Iris\u0026#34; } ] When using a list '[]' or set '{}' definition, it is also possible to make the list or set restricted to a certain type. In this case only items of the given definition are allowed as members. For example '[int]' requires the members of a list to be integers and '{User}' is a restricted set which only allows things of type User.\nBoth the list and/or the members can be made optional. For example, this '[str?]?' is a valid declaration. Since a set does not allow for nil values, it is not possible to make members of a set optional.\n This is an example using a restricted list:\n // Very simple `Note` type set_type('Note', { text: 'str', timestamp: 'uint' }); // Book type with `notes` of type `Note` set_type('Book', { title: 'str', notes: '[Note]' }); // Create a new book book = Book{ title: \u0026quot;hitchhiker's guide to the galaxy\u0026quot;, }; // Add a note to the book book.notes.push(Note{ text: 'the answer is 42', timestamp: int(now()) }); // It *must* be a `Note`, something else is not allowed assert(iserr(try(book.notes.push({test: 'not a Note'})))); // Return the book, 2 levels deep to see the note return(book, 2);  Return value in JSON format\n { \u0026#34;notes\u0026#34;: [ { \u0026#34;text\u0026#34;: \u0026#34;the answer is 42\u0026#34;, \u0026#34;timestamp\u0026#34;: 1573894579 } ], \u0026#34;title\u0026#34;: \u0026#34;hitchhiker\u0026#39;s guide to the galaxy\u0026#34; } Related functions    Function Description     del_type Delete a Type.   mod_type Modify an existing Type definition.   new_type Create a new Type.   has_type Determine if the current scope has a Type.   set_type Set property definitions on a Type and creates the Type if it did not exist.   type_info Return the Type definition.   types_info Return all Type definitions in the current scope.    Mutation format A mutation format is only required to understand if you manually want to parse events when watching for mutations on things. While most values have a pretty straightforward format when packed in a mutation, a Type instance is a bit more complex to understand.\nAn example of a Type mutation:\n{ \u0026#34;.\u0026#34;: 10, \u0026#34;#\u0026#34;: 123, \u0026#34;\u0026#34;: [ \u0026#34;hitchhiker\u0026#39;s guide to the galaxy\u0026#34; 4.2 ] }    Key Description     \u0026quot;.\u0026quot; The type_id of the Type.   \u0026quot;#\u0026quot; The #ID which is assigned to the Type instance.   \u0026quot;\u0026quot; Array with fields;    In order to correctly parse the mutation you require the types_info of a collection. Note that the types info is included inside an init event. Below is an example with an entry of types_info. This shows type Book which has ID 10 from the mutation example above.\n... { \u0026#34;created_at\u0026#34;: 1581454041, \u0026#34;fields\u0026#34;: [ [\u0026#34;title\u0026#34;, \u0026#34;str\u0026#34;] [\u0026#34;rating\u0026#34;, \u0026#34;float\u0026#34;] ], \u0026#34;modified_at\u0026#34;: 1581455876, \u0026#34;name\u0026#34;: \u0026#34;Book\u0026#34;, \u0026#34;type_id\u0026#34;: 10 } ... "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/wtype/",
	"title": "˂Type˃",
	"tags": [],
	"description": "",
	"content": "It is sometimes useful to get things with their ID (#) but still be able to filter-out properties which are not required.\nOne feature to return only specific properties from a thing, is to work with wrapped Types. This feature is especially useful (and fast) if your source thing is Type instance.\nWhen ThingsDB wraps a normal thing with a Type, each property must be compared to the definition of that Type to determine if it comes in the end result. However, if the source is an instance of Type, ThingsDB only needs to do this once and can use an internal cache for every other transition from that Type to Type.\n In the example below we show a use case for wrapping a book type. The set-up requires some code but once the Types are defined, it is rather easy to use.\nFunctions    Function Description     unwrap Unwrap to access the wrapped thing..    Example 1 new_type('Writer'); // Create type `Book` set_type('Book', { title: 'str', author: 'Writer' }); // Create type `Writer` set_type('Writer', { name: 'str', books: '{Book}', }); // Create a Type to just return a writer's `name` set_type('_WriterName', { name: 'any' }); // Create a Type for returning a `title` and author as `_WriterName` set_type('_Book', { title: 'any', author: '_WriterName' }); // Create a Type for returning only a set of `books` as `_Book` set_type('_AllBooks', { books: '{_Book}' }); // Create two sets, `writers` and `books`, to store all books and writers in .writers = set(); .books = set(); // A closure function to return a writer by name and create if not exists .upsert_writer = |name| { \u0026quot;Return the writer if exists, or create a new one\u0026quot;; .writers.find(|w| w.name == author_name) || { new_writer = Writer{ name: author_name, books: set() }; .writers.add(new_writer); new_writer; }; }; // Create a procedure for adding a new book new_procedure('add_book', |author_name, book_title| wse({ writer = .upsert_writer(author_name); new_book = Book{ title: book_title, author: writer, }; .books.add(new_book); writer.books.add(new_book); })); // Add some sample books wse({ run('add_book', 'Alice', 'Foo'); run('add_book', 'Alice', 'Bar'); run('add_book', 'Bob', 'Baz'); }); /* * Now we can simply wrap the collection to return the books with titles and * the author names including the thing-ids. */ return(.wrap('_AllBooks'), 3); { \u0026#34;#\u0026#34;: 4, \u0026#34;books\u0026#34;: [ { \u0026#34;#\u0026#34;: 6, \u0026#34;author\u0026#34;: { \u0026#34;#\u0026#34;: 5, \u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34; }, \u0026#34;title\u0026#34;: \u0026#34;Foo\u0026#34; }, { \u0026#34;#\u0026#34;: 7, \u0026#34;author\u0026#34;: { \u0026#34;#\u0026#34;: 5, \u0026#34;name\u0026#34;: \u0026#34;Alice\u0026#34; }, \u0026#34;title\u0026#34;: \u0026#34;Bar\u0026#34; }, { \u0026#34;#\u0026#34;: 9, \u0026#34;author\u0026#34;: { \u0026#34;#\u0026#34;: 8, \u0026#34;name\u0026#34;: \u0026#34;Bob\u0026#34; }, \u0026#34;title\u0026#34;: \u0026#34;Baz\u0026#34; } ] } What if a Type is removed? When a Type is removed that was wrapping things, all these things are not filtered anymore. However these things are still connected to the removed Type\u0026rsquo;s name. In case you decide to add a Type with the same name, then the wrapped things will be filtered again according to the Type\u0026rsquo;s new definition. The following example will demonstrate this event.\nExample 2 // Create type `Person` set_type('Person', { firstName: 'str', lastName: 'str', age: 'int', gender: 'str', }); // Create type `PersonName`, only includes the names of the person. set_type('PersonName', { firstName: 'str', lastName: 'str', }); // Create a thing with type `Person` .Bob = Person{ firstName: 'Bob', lastName: 'Lightyear', age: 43, gender: 'male', }; // Wrap .Bob and store the wrapped thing. .WrappedBob = .Bob.wrap('PersonName'); // Return the wrapped type .WrappedBob; The output:\n{ \u0026#34;#\u0026#34;: 21, \u0026#34;firstName\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Lightyear\u0026#34; } But now the type PersonNamewill be deleted.\n// Delete type `PersonName`. After deleting this Type `.WrappedBob` is not filtered del_type('PersonName'); // ...but returns all properties stored. .WrappedBob; The output of the property .WrappedBob is not filtered, but in fact returns all its containing properties.\n{ \u0026#34;#\u0026#34;: 21, \u0026#34;age\u0026#34;: 43, \u0026#34;firstName\u0026#34;: \u0026#34;Bob\u0026#34;, \u0026#34;gender\u0026#34;: \u0026#34;male\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;Lightyear\u0026#34; } If we subsequently add a type called PersonNameagain (with in this case a different set of properties), then the output to querying .WrappedBob is filtered by the type PersonName again.\n// Create the type `PersonName` again, but with a different set of properties. set_type('PersonName', { lastName: 'str', }); // And return `.WrappedBob` again. .WrappedBob; The output now only includes the lastName property. Thus the property .WrappedBob did not loose its wrapping with type PersonName after it got deleted.\n{ \u0026#34;#\u0026#34;: 21, \u0026#34;lastName\u0026#34;: \u0026#34;Lightyear\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/data-types/wtype/unwrap/",
	"title": "unwrap",
	"tags": [],
	"description": "",
	"content": "Unwrap a wrapped thing.\nFunction .unwrap()\nArguments None\nReturn value Returns the wrapped thing.\nExample  This code shows an example using unwrap():\n // Create a Type to return just an email field. set_type('_Email', {email: 'str'}); // Store a thing .joente = { name: 'Jeroen van der Heijden', email: 'jeroen@transceptor.technology', gender: 'male', }; // Wrap `joente` with the `_Email` type. .w = .joente.wrap('_Email'); // Return the original `thing` .w.unwrap();  Example return value in JSON format\n { \u0026#34;#\u0026#34;: 42, \u0026#34;name\u0026#34;: \u0026#34;Jeroen van der Heijden\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;jeroen@transceptor.technology\u0026#34;, \u0026#34;gender\u0026#34;: \u0026#34;male\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/operators/",
	"title": "Operators",
	"tags": [],
	"description": "",
	"content": "Operators Operators are special symbols in ThingsDB that carry out arithmetic or logical computation.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/operators/arithmetic-operators/",
	"title": "Arithmetic operators",
	"tags": [],
	"description": "",
	"content": "   Operator Description     + Addition operator.   - Subtraction operator.   / Division operator   * Multiplication operator.   % Modulo operator.    Division uses float division if either the numerator or denominator is of type float.\n  Arithmetic examples:\n [ 5 + 2, 5 - 2, 5 / 2.0, 5 / 2, 5 * 2, 5 % 2, ];  Return value in JSON format\n [ 7, 3, 2.5, 2, 10, 1 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/operators/assignments/",
	"title": "Assignments",
	"tags": [],
	"description": "",
	"content": "Assignments will generate an event.\n   Operator Description     = Assignment operator.   *= Multiplication assignment.   /= Float division assignment.   %= Modulo assignment.   += Addition assignment.   -= Subtraction assignment   \u0026amp;= Bitwise AND assignment.   ^= Bitwise XOR assignment.   |= Bitwise OR assignment.    "
},
{
	"uri": "https://docs.thingsdb.net/v0/operators/binary-bitwise-operators/",
	"title": "Binary bitwise operators",
	"tags": [],
	"description": "",
	"content": "Can be used on integer values.\n   Operator Description     \u0026amp; Bitwise AND, true if both a and b are 1.   | Bitwise OR, true if at least a or b is 1.   ^ Bitwise XOR, true if a and b are different.     Binary bitwise operator examples:\n [ 0b110 \u0026amp; 0b011, 0b110 | 0b011, 0b110 ^ 0b011, ];  Return value in JSON format\n [ 2, 7, 5 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/operators/conditional-ternary-operator/",
	"title": "Conditional ternary operator",
	"tags": [],
	"description": "",
	"content": "The conditional operator returns one of two values based on the logical value of the condition.\nSyntax: expression ? if-true : if-false\n Conditional (ternary) operator examples:\n 2 \u0026gt; 1 ? 'two is greater than one' : 'two is less than one';  Return value in JSON format\n \u0026#34;two is greater than one\u0026#34; It is possible to use block scopes for the if-true and if-false part for the conditional operator.\n For example:\n .sessions.len() \u0026lt; .licenses ? { // we have a license, do something... .sessions.add(Session{ timestamp: now() }); } : { // no licenses left raise('no licenses left'); } "
},
{
	"uri": "https://docs.thingsdb.net/v0/operators/logical-operators/",
	"title": "Logical operators",
	"tags": [],
	"description": "",
	"content": "Logical operators are generally used with bool values.\n   Operator Description     \u0026amp;\u0026amp; Logical AND.   || Logical OR.    As logical expressions are evaluated left to right, they are tested for possible \u0026ldquo;short-circuit\u0026rdquo; evaluation. This means that the evaluation of an expression is stopped when the outcome is determined. This applies in the following two cases:\n  expression_1 \u0026amp;\u0026amp; expression_2 : if expression_1 evaluates to false then expression_2 is not evaluated. Any side effects of doing so do not take place.\n  expression_1 || expression_2: if expression_1 evaluates to true then expression_2 is not evaluated. Any side effects of doing so do not take place.\n   Logical short-circuit examples:\n x = 0; [ false \u0026amp;\u0026amp; x += 1, true || x += 1, x ]; // expression x += 1 will never be executed  Return value in JSON format\n [ false, true, 0 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/operators/precedence-and-associativity/",
	"title": "Precedence and associativity",
	"tags": [],
	"description": "",
	"content": "   Symbol Type of operation Associativity     () Expression parenthesis Left-to-right   ! Not operator Right-to-left   * / % Multiplication, Modulo, Division Left-to-right   + - Add, Subtract Left-to-right   \u0026amp; Bitwise AND Left-to-right   ^ Bitwise XOR Left-to-right   | Bitwise OR Left-to-right   == != \u0026lt;= \u0026gt;= \u0026lt; \u0026gt; Compare Left-to-right   \u0026amp;\u0026amp; Logical AND Left-to-right   || Logical OR Left-to-right   ? : Conditional Right-to-left   = *= /= %= += -= \u0026amp;= ^= |= Assignments Right-to-left    "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/",
	"title": "Collection API",
	"tags": [],
	"description": "",
	"content": "Collection API The collection scope can be used to manage data within a collection.\nMost of the functions in the Collection API can also be used in the thingsdb and node scopes.\n "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/assert/",
	"title": "assert",
	"tags": [],
	"description": "",
	"content": "Raises assert_err() if the specified statement evaluates to false.\nThis function does not generate an event.\nFunction assert(statement [, error_msg])\nArguments    Argument Type Description     statement any (required) The statement to evaluate.   msg str (optional) Custom error message.    Return value Assert returns the value of the given statement when it evaluates to true. Otherwise an assert_err() is raised.\nExample  This code shows how assert can be used:\n assert(1 \u0026gt; 2, 'one is still smaller than two');  Raises an assert_err() exception\n { \u0026#34;error_msg\u0026#34;: \u0026#34;one is still smaller than two\u0026#34;, \u0026#34;error_code\u0026#34;: -50 } "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/base64_decode/",
	"title": "base64_decode",
	"tags": [],
	"description": "",
	"content": "Decode a Base64 encoded string.\nSee base64_encode for Base64 encoding.\nThis function does not generate an event.\nFunction base64_decode(encoded)\nArguments    Argument Type Description     encoded str/bytes The string value to decode.    Return value Decoded bytes value is returned.\nExample  This code shows an example for base64_decode:\n encoded = 'YmFzZTY0IGVuY29kZWQgc3RyaW5n'; // decode data = base64_decode(encoded); // result is of type bytes assert(type(data) == 'bytes'); // return as string str(data);  Return value in JSON format\n \u0026#34;base64 encoded string\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/base64_encode/",
	"title": "base64_encode",
	"tags": [],
	"description": "",
	"content": "Encode a str or bytes value using Base64.\nSee base64_decode for Base64 decoding.\nThis function does not generate an event.\nFunction base64_encode(string)\nArguments    Argument Type Description     string str/bytes The value to encode.    Return value Encoded str value is returned.\nExample  This code shows an example for base64_encode:\n encoded = base64_encode('base64 encoded string'); // result is of type str assert(type(encoded) == 'str'); // return encoded;  Return value in JSON format\n \u0026#34;YmFzZTY0IGVuY29kZWQgc3RyaW5n\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/bool/",
	"title": "bool",
	"tags": [],
	"description": "",
	"content": "Returns a bool from a specified value. If no value is given, false is returned.\nTypes with a length evaluate to true when the length is not 0, and false otherwise.\nThis function does not generate an event.\nFunction bool(value)\nArguments    Argument Type Description     value any (optional) The value to convert to a boolean value.    Return value A boolean value.\nExample  This code shows some return values for bool():\n [ bool(), bool(nil), bool({}), bool({answer: 42}), bool([]), bool([1, 2, 3]), bool(''), bool('forty two'), ];  Return value in JSON format\n [ false, false, false, true, false, true, false, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/bytes/",
	"title": "bytes",
	"tags": [],
	"description": "",
	"content": "Convert a value to a byte sequence. If no value is given, an empty byte sequence is returned.\nThis function does not generate an event.\nFunction bytes(value)\nArguments    Argument Type Description     value any (optional) The value where to create a bytes value for.    "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/deep/",
	"title": "deep",
	"tags": [],
	"description": "",
	"content": "Returns the current deep value for the running query. The deep value indicates how far down the result of a query is returned. For example, thing1 may contain a thing2 that contains a thing3. A deep value of 1 would only show the content of thing1 and a deep value of 3 will go as deep as the content of thing3.\nThe deep value changes when a function with a return(..) is called which has changed the deep value for this query.\nThis function does not generate an event.\nFunction deep()\nArguments None\nReturn value The current deep value for the running query.\nExample  This code uses deep() to return the default deep value:\n deep(); // returns the default since `deep` is not changed  Return value in JSON format\n 1 "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/del_enum/",
	"title": "del_enum",
	"tags": [],
	"description": "",
	"content": "Deletes an existing enumerator type.\nIt is not possible to delete a enumerator type which is used by a Type or if one of the enumerator members is still being used. See example below.\nThis function generates an event.\nFunction del_enum(enum)\nArguments    Argument Type Description     enum string Name of the enumerator type to be deleted.    Return value The value nil.\nExample  This code shows how to use del_enum():\n // Create type `B` which has a reference to type `A` set_enum('Status', { OK: 0, NOK: -1, }); status = enum('Status', 0); // Cannot delete `Status` since one of the members is being used assert(iserr(try(del_enum('Status')))); // Assign `nil` to status so the enum member is released status = nil; // Now we can remove type `A` del_enum('Status');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/del_type/",
	"title": "del_type",
	"tags": [],
	"description": "",
	"content": "Deletes an existing Type.\nIt is not possible to delete a Type which is used by another Type. You should first change or delete the other Type before you are able to delete this Type. See the example below.\nIf there are still instances of the Type you delete, then all instances will be converted to normal things. No properties will be removed in this process. With type_count(..) you can view the number of instances of a certain Type.\n This function generates an event.\nFunction del_type(type)\nArguments    Argument Type Description     type string Name of the Type to be deleted.    Return value The value nil.\nExample  This code shows how to use del_type():\n // Create type `A` new_type('A'); // Create type `B` which has a reference to type `A` set_type('B', { a: 'A' }); // Cannot delete `A` since it is referenced by type `B`. assert(iserr(try(del_type('A')))); // First change type `B` mod_type('B', 'mod', 'a', 'thing'); // Now we can remove type `A` del_type('A');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/enum/",
	"title": "enum",
	"tags": [],
	"description": "",
	"content": "Returns a enum member from a given value. A lookup_err() is raised if either the enum or value is not found.\nThis function does not generate an event.\nFunction enum(enum, [value])\nArguments    Argument Type Description     enum str (required) The name of the enumeration type.   value any (optional) The value to search the enum member for. If omitted, the default member is returned.    Return value Member within the given enum equal to the given value.\nExample  This code shows some return values for enum(..):\n set_enum('Status', { OK: 0, NOK: -1 }); // get the `Status` member with value `0` status = enum('Status', 0); status.name(); // return the `name` of the enum member  Return value in JSON format\n \u0026#34;OK\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/enum_info/",
	"title": "enum_info",
	"tags": [],
	"description": "",
	"content": "Returns information about a given enumeration type.\n   Value Description     enum_id Internal enum ID (can be used to identify Enums in collection events).   created_at Time Stamp when the enum is created.   default Default member of this enumerator. The default member is used when implicitly creating a value of this enumerator type. See mod_enum(..) to change the deafult member.   modified_at Time Stamp when the enum is last modified or nil if never modified.   name Enum\u0026rsquo;s name.   members Array with arrays containing two strings, the name and value.    This function does not generate an event.\nFunction enum_info(enum)\nArguments    Argument Type Description     enum str The name of the enum for which the information has to be returned.    Return value Returns info about the enumeration type.\nExample  This code shows the output of enum_info():\n // Just a Type as an example set_enum('Color', { RED: '#ff0000', GREEN: '#00ff00', BLUE: '#0000ff', }); // Return Type info enum_info('Color');  Example return value in JSON format\n { \u0026#34;enum_id\u0026#34;: 0, \u0026#34;created_at\u0026#34;: 1589917348, \u0026#34;default\u0026#34;: \u0026#34;RED\u0026#34;, \u0026#34;modified_at\u0026#34;: null, \u0026#34;name\u0026#34;: \u0026#34;Color\u0026#34;, \u0026#34;members\u0026#34;: [ [\u0026#34;RED\u0026#34;, \u0026#34;#ff0000\u0026#34;], [\u0026#34;GREEN\u0026#34;, \u0026#34;#00ff00\u0026#34;], [\u0026#34;BLUE\u0026#34;, \u0026#34;#0000ff\u0026#34;] ] } "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/enums_info/",
	"title": "enums_info",
	"tags": [],
	"description": "",
	"content": "Returns enumeration type information about all the enum\u0026rsquo;s within a collection scope.\nSee the enum_info() function documentation for an example of the exposed information.\nThis function does not generate an event.\nFunction enums_info()\nArguments None\nReturn value List with info about all enumeration types in the collection scope.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/err/",
	"title": "err",
	"tags": [],
	"description": "",
	"content": "Returns an error.\nThis function does not generate an event.\nFunction err([code, [message]])\nArguments    Argument Type Description     code int (optional) Integer error code between -127 and -50, defaults to -100.   message str (optional) Optional error message.    Return value An error value.\nExample  This code shows some return values for err():\n [ err(), err(-100, 'some error occurred'), err(-101), err(-59), ];  Return value in JSON format\n [ { \u0026#34;!\u0026#34;: \u0026#34;err(-100)\u0026#34;, \u0026#34;error_code\u0026#34;: -100, \u0026#34;error_msg\u0026#34;: \u0026#34;error:-100\u0026#34; }, { \u0026#34;!\u0026#34;: \u0026#34;err(-100)\u0026#34;, \u0026#34;error_code\u0026#34;: -100, \u0026#34;error_msg\u0026#34;: \u0026#34;some error occurred\u0026#34; }, { \u0026#34;!\u0026#34;: \u0026#34;err(-101)\u0026#34;, \u0026#34;error_code\u0026#34;: -101, \u0026#34;error_msg\u0026#34;: \u0026#34;error:-101\u0026#34; }, { \u0026#34;!\u0026#34;: \u0026#34;overflow_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -59, \u0026#34;error_msg\u0026#34;: \u0026#34;integer overflow\u0026#34; } ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/float/",
	"title": "float",
	"tags": [],
	"description": "",
	"content": "Returns a float from a specified value. If no value is given, the default float 0.0 is returned.\nIf the specified value is of type str, then the initial characters of the string are converted until a non-digit character is found. Initial white space is ignored and the number may start with an optional + or - sign.\nType bool values are converted to 1.0 for true and 0.0 for false.\nThis function does not generate an event.\nFunction float(value)\nArguments    Argument Type Description     value any (optional) The value where to create a floating point value for.    Return value A floating point value. Other type than float, str, bool or int will raise a bad_data_err().\nExample  This code shows some return values for float():\n [ float(), float(42), float('0.365e+3 days'), float('0xFF'), float(true), float(false), ];  Return value in JSON format\n [ 0, 42.0, 365.0, 255.0, 1.0, 0.0 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/has_enum/",
	"title": "has_enum",
	"tags": [],
	"description": "",
	"content": "Determines if a enumerator type exists in the current @collection scope.\nThis function does not generate an event.\nFunction has_enum(enum)\nArguments    Argument Type Description     enum str (required) Enum name to check.    Return value Returns true if a enumerator type with a given name exists and otherwise false.\nExample  This code shows an example use case of has_enum():\n has_enum('XXX');  Return value in JSON format\n false "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/has_type/",
	"title": "has_type",
	"tags": [],
	"description": "",
	"content": "Determines if a Type exists in the current @collection scope.\nThis function does not generate an event.\nFunction has_type(type)\nArguments    Argument Type Description     type str (required) Type name to check.    Return value Returns true if a Type with a given name exists and otherwise false.\nExample  This code shows an example use case of has_type():\n has_type('XXX');  Return value in JSON format\n false "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/if/",
	"title": "if",
	"tags": [],
	"description": "",
	"content": "Runs a block code based on the result of a given condition.\nThingsDB uses lazy-evaluation of function arguments. For this reason if() is a function call, and not a statement like in most other languages.\n This function does not generate an event.\nFunction if(condition, if_true, [if_false])\nArguments    Argument Type Description     condition any (required) The condition to evaluate.   if_true any (required) Will be executed when the condition evaluated to true.   if_false any (optional) Will be executed when the condition evaluated to false.    Return value Returns nil.\nExample  This code shows how if(..) can be used:\n if(2 \u0026gt; 1, { return(\u0026quot;two is more than one\u0026quot;); }); \u0026quot;math is broken\u0026quot;;  Return value in JSON format\n \u0026#34;two is more than one\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/int/",
	"title": "int",
	"tags": [],
	"description": "",
	"content": "Returns an int from a specified value. If no value is given, the default integer 0 is returned.\nIf the specified value was a float value, then the new integer value will be rounded towards zero.\nIf the specified value is of type str, then the initial characters of the string are converted until a non-digit character is found. Initial white space is ignored and the number may start with an optional + or - sign.\nType bool values are converted to 1 for true and 0 for false.\nThis function does not generate an event.\nFunction int(value)\nArguments    Argument Type Description     value any (optional) The value where to create an integer value for.    Return value An integer value. In case the integer value is too large for a 64bit integer, an overflow_err() is raised. Other type than float, str, bool or int will raise a bad_data_err().\nExample  This code shows some return values for int():\n [ int(), int(2.718), int(-1.9), int('365 days'), int('0xFF'), int(true), int(false), ];  Return value in JSON format\n [ 0, 2, -1, 365, 255, 1, 0 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isarray/",
	"title": "isarray",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is of type list or tuple or not. The functions islist and istuple can be used to check if the array is mutable.\nThis function does not generate an event.\nFunction isarray(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the value passed is an array, else it returns false.\nExample  This code shows some return values for isarray():\n [ isarray( [] ), isarray( tmp = [['nested']] ), isarray( tmp[0] ), ];  Return value in JSON format\n [ true, true, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isascii/",
	"title": "isascii",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is of type str and contains only valid ascii characters.\nThis function does not generate an event.\nFunction isascii(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type str and contains only ascii characters, else false.\nExample  This code shows some return values for isascii():\n [ isascii( 'ԉ' ), isascii( 'pi' ), ];  Return value in JSON format\n [ false, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isbool/",
	"title": "isbool",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is a bool or not.\nThis function does not generate an event.\nFunction isbool(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a boolean, else it returns false.\nExample  This code shows some return values for isbool():\n [ isbool( true ), isbool( 'true' ), isbool( nil ), ];  Return value in JSON format\n [ true, false, false ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isbytes/",
	"title": "isbytes",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is of type bytes or not.\nThis function does not generate an event.\nFunction isbytes(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type bytes, else it returns false.\nExample  This code shows some return values for isbytes():\n [ isbytes( bytes() ), isbytes( 'abc' ), ];  Return value in JSON format\n [ true, false ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isenum/",
	"title": "isenum",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is an enumeration type member or not.\nThis function does not generate an event.\nFunction isenum(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type enum, else it returns false.\nExample  This code shows some return values for isenum():\n set_enum('Status', { OK: 0, NOK: -1, }); [ isenum( Status{OK} ), isenum( 0 ), ];  Return value in JSON format\n [ true, false ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/iserr/",
	"title": "iserr",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is a error or not.\nThis function does not generate an event.\nFunction iserr(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is an error, else it returns false.\nExample  This code shows some return values for iserr():\n [ iserr( err() ), iserr( zero_div_err() ), iserr( try((1 / 0)) ), iserr( try((1 / 1)) ), ];  Return value in JSON format\n [ true, true, true, false ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isfloat/",
	"title": "isfloat",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is a floating point value or not.\nThis function does not generate an event.\nFunction isfloat(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a float, else it returns false.\nExample  This code shows some return values for isfloat():\n [ isfloat( 42.0 ), isfloat( 0.42e+2 ), isfloat( 42 ), ];  Return value in JSON format\n [ true, true, false ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isinf/",
	"title": "isinf",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is a positive or negative infinity.\nThis function does not generate an event.\nFunction isinf(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a positive or negative infinity, else it returns false.\nExample  This code shows some return values for isinf():\n [ isinf( -inf ), isinf( inf ), isinf( 0 ), isinf( nan ), ];  Return value in JSON format\n [ true, true, false, false ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isint/",
	"title": "isint",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is an integer or not.\nThis function does not generate an event.\nFunction isint(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is an integer, else it returns false.\nExample  This code shows some return values for isint():\n [ isint( 42 ), isint( 0x2a ), isint( 42.0 ), isint( '42' ), isint( true ), ];  Return value in JSON format\n [ true, true, false, false, false ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/islist/",
	"title": "islist",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is a list or not.\nThis function does not generate an event.\nFunction islist(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a list, else it returns false.\nExample  This code shows some return values for islist():\n [ islist( [] ), islist( tmp = [['nested']] ), islist( tmp[0] ), ];  Return value in JSON format\n [ true, true, false ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isnan/",
	"title": "isnan",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is a number.\nThis function does not generate an event.\nFunction isnan(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is not a number, else false.\nExample  This code shows some return values for isnan():\n [ isnan( true ), isnan( 123 ), isnan( 3.14 ), isnan( inf ), isnan( [] ), isnan( {} ), isnan( nan ), isnan( '123' ), ];  Return value in JSON format\n [ false, false, false, false, true, true, true, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isnil/",
	"title": "isnil",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is nil.\nThis function does not generate an event.\nFunction isnil(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is nil, else false.\nExample  This code shows some return values for isnil():\n [ isnil( nil ), isnil( 0 ), ];  Return value in JSON format\n [ true, false ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/israw/",
	"title": "israw",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is of type str or bytes.\nThis function does not generate an event.\nFunction israw(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type str or bytes, else false.\nExample  This code shows some return values for israw():\n [ israw( 'some string' ), israw( bytes('xxxx') ), ];  Return value in JSON format\n [ true, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isset/",
	"title": "isset",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is a set or not.\nThis function does not generate an event.\nFunction isset(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a set, else it returns false.\nExample  This code shows some return values for isset():\n [ isset( [] ), isset( set() ), ];  Return value in JSON format\n [ false, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isstr/",
	"title": "isstr",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is of type str.\nThe value is not explicitly checked for valid UTF-8 characters, use isutf8() if you want to check for valid UTF-8 data.\nThis function does not generate an event.\nFunction isstr(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type str, else false.\nExample  This code shows some return values for isutf8():\n [ isstr( 'ԉ' ), isstr( 'pi' ), ];  Return value in JSON format\n [ true, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isthing/",
	"title": "isthing",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is a thing or not.\nType instances are also things, so this function returns true for a Type instance as well.\n This function does not generate an event.\nFunction isthing(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a thing, else it returns false.\nExample  This code shows some return values for isthing():\n new_type('A'); [ isthing( {} ), isthing( A{} ), isthing( [] ), ];  Return value in JSON format\n [ true, true, false ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/istuple/",
	"title": "istuple",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is a tuple or not. At least nested arrays are of kind tuple.\nThis function does not generate an event.\nFunction istuple(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is a tuple, else it returns false.\nExample  This code shows some return values for istuple():\n [ istuple( [] ), istuple( tmp = [['nested'], set()] ), istuple( tmp[0] ), istuple( tmp[1] ), ];  Return value in JSON format\n [ false, false, true, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/isutf8/",
	"title": "isutf8",
	"tags": [],
	"description": "",
	"content": "This function determines whether the provided value is of type str and contains valid UTF-8 characters.\nThis function does not generate an event.\nFunction isutf8(value)\nArguments    Argument Type Description     value any (required) The value to be tested.    Return value Returns true if the given value is of type raw and contains valid utf8, else false.\nExample  This code shows some return values for isutf8():\n [ isutf8( 'ԉ' ), isutf8( 'pi' ), ];  Return value in JSON format\n [ true, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/list/",
	"title": "list",
	"tags": [],
	"description": "",
	"content": "Returns a new empty list or returns a list for a given set.\nThis function does not generate an event.\nFunction list([value])\nArguments    Argument Type Description     value set/list/tuple (optional) Optional value to initialize the list.    Return value A new list.\nExample  This code shows some return values for list():\n list( set({}, {}) );  Return value in JSON format\n [ {}, {} ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/mod_enum/",
	"title": "mod_enum",
	"tags": [],
	"description": "",
	"content": "This function is used to modify an existing enumerator type. A number of actions can be performed with this function.\nThis function generates an event.\nActions    Action Description     add Add a member to an existing enumerator type.   def Set a member as default for an existing enumerator type.   del Delete a member of an existing enumerator type.   mod Modify a member value of an existing enumerator type.   ren Rename a member of an existing enumerator type.    "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/mod_enum/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "Adds a member to an existing enumerator type.\nAction mod_enum(enum, 'add', name, value)\nArguments    Argument Type Description     enum str Name of the enumerator type where the member has to be added to.   'add' str Passing this argument will result in an add action.   name str Name of the member that has to be added.   value depends Value of the member that has to be added. The type of the member must be equal to the other enum values.    Return value The value nil.\nExample  This code shows how to use the action add:\n // Create enum `Color` set_enum('Color', { RED: '#ff0000', BLUE: '#00ff00' }); // Add `GREEN` to enum `Color` mod_enum('Color', 'add', 'GREEN', '#0000ff');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/mod_enum/def/",
	"title": "def",
	"tags": [],
	"description": "",
	"content": "Set a member from an existing enumerator type as default member. The default member is also selected when a instance of a Type is created using the enumerator as a required property.\nAction mod_enum(enum, 'def', name)\nArguments    Argument Type Description     enum str Name of the enumerator type where the member has to be removed from.   'def' str Passing this argument will result in a set default action.   name str Name of the member to set as default.    Return value The value nil.\nExample  This code shows how to use the action def:\n set_enum('Color', { RED: '#f00', GREEN: '#0f0', BLUE: '#00f' }); // set GREEN as the default color mod_enum('Color', 'def', 'GREEN'); enum('Color').name(); // color now defaults to GREEN  Return value in JSON format\n \u0026#34;GREEN\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/mod_enum/del/",
	"title": "del",
	"tags": [],
	"description": "",
	"content": "Delete a member from an existing enumerator type.\nA member may only be removed if the member is no longer being used. Otherwise an operation_err() is raised.\n Action mod_enum(enum, 'del', name)\nArguments    Argument Type Description     enum str Name of the enumerator type where the member has to be removed from.   'del' str Passing this argument will result in a delete action.   name str Name of the member to be removed.    Return value The value nil.\nExample  This code shows how to use the action del:\n // Create enum `Color` set_enum('Color', { RED: '#ff0000', BLUE: '#00ff00' }); // Remove `BLUE` from enum `Color` mod_enum('Color', 'del', 'BLUE');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/mod_enum/mod/",
	"title": "mod",
	"tags": [],
	"description": "",
	"content": "Modify a member value from an existing enumerator type.\nAction mod_enum(enum, 'mod', name, value)\nArguments    Argument Type Description     enum str Name of the enumerator type where the member has to be removed from.   'mod' str Passing this argument will result in a modify action.   name str Name of the member that has to be modified.   value any New value for the member that has to be modified.    Return value The value nil.\nExample  This code shows how to use the action mod:\n // Create enum `Color` set_enum('Color', { RED: '#ff0000', BLUE: '#00ff00', GREEN: '#0000aa', }); // Modify the value for `GREEN` mod_enum('Color', 'mod', 'GREEN', '#0000ff');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/mod_enum/ren/",
	"title": "ren",
	"tags": [],
	"description": "",
	"content": "Rename a member value from an existing enumerator type.\nAction mod_enum(enum, 'ren', name, to)\nArguments    Argument Type Description     enum str Name of the enumerator type where the member has to be removed from.   'ren' str Passing this argument will result in a rename action.   name str Name of the member that has to be modified.   to str New name for the member that has to be modified.    Return value The value nil.\nExample  This code shows how to use the action ren:\n // Create enum `Color` set_enum('Color', { RED: '#ff0000', BLUE: '#00ff00', GRAS: '#0000ff', }); // Modify `GRAS` to `GREEN` mod_enum('Color', 'ren', 'GRAS', 'GREEN');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/mod_type/",
	"title": "mod_type",
	"tags": [],
	"description": "",
	"content": "This function is used to modify an existing Type. A number of actions can be performed with this function.\nThis function generates an event.\nActions    Action Description     add Add a property to an existing Type.   del Delete a property of an existing Type.   mod Modify a property of an existing Type.   ren Rename a property of an existing Type.    "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/mod_type/add/",
	"title": "add",
	"tags": [],
	"description": "",
	"content": "Adds a property to an existing Type.\nSince version v0.9.2 an initial value is no longer required when having active instances of the given Type. If the initial value is omitted, then the default value according the Type definition will be applied.\n Action mod_type(type, 'add', name, definition, [init])\nArguments    Argument Type Description     type str Name of the Type where the property has to be added to.   'add' str Passing this argument will result in an add action.   name str Name of the property that has to be added.   definition str Type definition of the property that has to be added.   init any/closure The default value to set on existing instances of this Type. If a closure is used, then the closure will be called on each existing instance, see init using callback.    Return value The value nil.\nExample  This code shows how to use the action add:\n // Create type `Person` set_type('Person', { name: 'str', age: 'int' }); // Add `hobbies` to type `Person` mod_type('Person', 'add', 'hobbies', '[str]');  Return value in JSON format\n null Init using callback Instead of a fixed initial value, a closure may be used. The closure will be called on each instance of the Type, with the instance as it\u0026rsquo;s first argument. The return value of the closure will be used as the new value, unless:\n nil is returned by the closure. The return value does not match the definition. In this case an operation_err() is raised after mod_type(..) has finished. An error is raised inside the closure. In this case an operation_err() is raised after mod_type(..) has finished.  In all three cases above, the value will be untouched after the callback. Thus, unless you have changed the property yourself, the default will be applied.\nSuppose we want to add a chat property or type Chat to type Room:\nset_type('Chat', { messages: '[str]' }); set_type('Room', { name: 'str' }); .room_a = Room{ name: 'room A' }; .room_b = Room{ name: 'room B' }; /* * Suppose we want to add a `chat` property or type `Chat` to type `Room` and * used the following code: * * mod_type('Room', 'add', 'chat', 'Chat'); * * This would give `room A` and `room B` both the SAME instance of type Chat. THus * when adding for example a message to room A, the message would also appear in * room B. * * This can be solved using a closure to assign a new instance to each instance of room. * * mod_type('Room', 'add', 'chat', 'Chat', || Chat{}); * * Alternatively, you could also perform some additional work based on the room, see code below: */ mod_type('Room', 'add', 'chat', 'Chat', |room| { room.chat = Chat{ messages: [`Welcome in {room.name}`] }; nil; // Return `nil` since we have chosen to set `chat` inside the closure }); .room_a.chat.messages; // Return the chat messages of room A  Return value in JSON format\n [ \u0026#34;Welcome in room A\u0026#34; ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/mod_type/del/",
	"title": "del",
	"tags": [],
	"description": "",
	"content": "Deletes a property from an existing Type.\nThe property will be removed from all the active instances of that Type.\n Action mod_type(type, 'del', name)\nArguments    Argument Type Description     type str Name of the Type where the property has to be removed from.   'del' str Passing this argument will result in a delete action.   name str Name of the property that has to be removed.    Return value The value nil.\nExample  This code shows how to use the action del:\n // Create type `Person` set_type('Person', { name: 'str', age: 'int', hobbies: '[str]' }); // Delete `hobbies` from type `Person` mod_type('Person', 'del', 'hobbies');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/mod_type/mod/",
	"title": "mod",
	"tags": [],
	"description": "",
	"content": "Modifies the type definition of a property from an existing Type.\nWithout an additional callback it is possible to modify to a less \u0026lsquo;strict\u0026rsquo; definition. So for example, age: 'int' can become age: 'int?', but not the other way around. Since version v0.9.3 it is possible to migrate to a more strict or completely different definition by using an additional callback closure for generating new values.\n Action mod_type(type, 'mod', name, definition, [callback])\nArguments    Argument Type Description     type str Name of the Type where the property has to be modified from.   'mod' str Passing this argument will result in a modify action.   name str Name of the property that has to be modified.   definition str New type definition of the property that has to be modified.   callback closure The closure will be called on each existing instance and can be used to set a new value, see modify using callback.    Return value The value nil.\nExample  This code shows the return value for the action mod:\n // Create type `Person` set_type('Person', { name: 'str', age: 'int', hobbies: '[str]' }); // Make `age` nillable mod_type('Person', 'mod', 'age', 'int?');  Return value in JSON format\n null Modify using callback If you want to migrate an exiting property definition to a complete different or more strict definition, an addition closure argument must be used to generate new values for existing instances. The return value of the closure will be used as the new value, unless:\n nil is returned by the closure. The return value does not match the new definition. In this case an operation_err() is raised after mod_type(..) has finished. An error is raised inside the closure. In this case an operation_err() is raised after mod_type(..) has finished.  In all three cases above, the value will be untouched after the callback unless the existing property does not match with the new definition. In the latter case, a default value will be applied after the callback has finished.\nDuring the migration, each instance has any definition for the property which is being modified. This is done by ThingsDB so we ensure that both the old value, and the new value will match the definition. This means that when the callbacks are executed, everything may be attached to the property. This value will be corrected by ThingsDB if there is no match between the value and the new definition.\nSuppose we want to modify a chat property on type Room from definition \u0026quot;str\u0026quot; to definition \u0026quot;Chat\u0026quot;:\nset_type('Room', { chat: 'str' }); my_room = Room{ chat: 'My Chat Room!' }; // Create a new Chat type set_type('Chat', { messages: '[str]', name: 'str', }); // Replace the `chat` string with the `Chat` type. // As name for the new Chat type we apply the `old` chat string mod_type('Room', 'mod', 'chat', 'Chat', |room| Chat{name: room.chat}); my_room.chat; // Return my chat room  Return value in JSON format\n { \u0026#34;messages\u0026#34;: [], \u0026#34;name\u0026#34;: \u0026#34;My Chat Room!\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/mod_type/ren/",
	"title": "ren",
	"tags": [],
	"description": "",
	"content": "Rename a property from an existing Type.\nAction mod_type(type, 'ren', name, to)\nArguments    Argument Type Description     type str Name of the Type where the property has to be modified from.   'ren' str Passing this argument will result in a modify action.   name str Name of the property that has to be modified.   to str New name for the property that has to be modified.    Return value The value nil.\nExample  This code shows the return value for the action ren:\n // Create type `Person` set_type('Person', { name: 'str', a: 'int', }); // Rename `a` to `age` mod_type('Person', 'ren', 'a', 'age');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/new/",
	"title": "new",
	"tags": [],
	"description": "",
	"content": "Creates a new instance of a defined Type.\nWhen possible it is preferred to use the syntax MyType{...} to create a instance of a certain Type. However, sometimes you need to create an instance dynamically with the Type\u0026rsquo;s name as variable and then new() can be used.\n Since version v0.9.2 the value argument is no longer required. If not given all properties will be set to their default values.\n This function generates an event.\nFunction new(type, [value])\nArguments    Argument Type Description     type str The name of the Type that an instance must be made of.   value thing (optional) Thing containing all the properties that must be added to the new instance of the given Type.    Return value A Thing containing all the properties which have been added to the new instance of the given Type.\nExample  This code shows how to use new():\n // Create type `Person` set_type('Person', { name: 'str', age: 'int', hobbies: '[str]' }); // Create an instance of type `Person` new('Person', { name: 'John', age: 34, hobbies: ['Football'] });  Return value in JSON format\n { \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;, \u0026#34;age\u0026#34;: 34, \u0026#34;hobbies\u0026#34;: [\u0026#34;Football\u0026#34;] }  The property names and (data) types of the values that are added to an instance of an existing type must exactly match that Type.\n "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/new_type/",
	"title": "new_type",
	"tags": [],
	"description": "",
	"content": "Creates a new Type. This function only creates a new type and does not allow you to specify any fields. With the set_type() function you can define the fields for the new type.\nIt is possible to use set_type directly without calling new_type first. However, sometimes you want to cross reference two types so you want both type to exists before calling set_type.\n This function generates an event.\nFunction new_type(type)\nArguments    Argument Type Description     type string Name of the Type to be created.    Return value The name of the newly created Type.\nExample  This code shows a use case where new_type() is helpful:\n new_type('A'); new_type('B'); set_type('A', { b: 'B?' }); set_type('B', { a: 'A?' }); // Return type information types_info();  Example return value in JSON format\n [ { \u0026#34;type_id\u0026#34;: 0, \u0026#34;created_at\u0026#34;: 1579250574, \u0026#34;modified_at\u0026#34;: 1579250574, \u0026#34;name\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;fields\u0026#34;: [ [\u0026#34;b\u0026#34;, \u0026#34;B?\u0026#34;] ] }, { \u0026#34;type_id\u0026#34;: 1, \u0026#34;created_at\u0026#34;: 1579250574, \u0026#34;modified_at\u0026#34;: 1579250574, \u0026#34;name\u0026#34;: \u0026#34;B\u0026#34;, \u0026#34;fields\u0026#34;: [ [\u0026#34;a\u0026#34;, \u0026#34;A?\u0026#34;] ] } ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/now/",
	"title": "now",
	"tags": [],
	"description": "",
	"content": "Return the time in seconds since the epoch as a floating point number.\nIf you require the same time multiple times within a query, then call now() only once and save it to a variable, for example now = now();\nThis function does not generate an event.\nFunction now()\nArguments None\nReturn value Current timestamp.\nExample  This code shows the current timestamp:\n // current timestamp now();  Example return value in JSON format\n 1551093313.6622682 "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/raise/",
	"title": "raise",
	"tags": [],
	"description": "",
	"content": "Raises an error.\nThis function does not generate an event.\nFunction raise([error])\nArguments    Argument Type Description     value error/str (optional) The error to raise.    Return value None\nExample  Some examples on how raise() can be used:\n raise (); // raise a default error 'This code is not reached'; raise ('no licenses left'); // raise with a custom message 'This code is not reached'; raise (value_err()); // raise a value error 'This code is not reached'; "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/rand/",
	"title": "rand",
	"tags": [],
	"description": "",
	"content": "Returns pseudo-random number between 0.0 and 1.0.\nDo not use rand() when the purpose is security related since the linear congruential algorithms used by this function is too easy to break.\n This function does not generate an event.\nFunction rand()\nArguments None\nReturn value A pseudo-random float number between 0.0 and 1.0.\nExample  Some examples on how raise() can be used:\n // Return a pseudo-random number between 0.0 and 1.0 rand(); Example return value in JSON format:\n0.54747654169214726 "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/randint/",
	"title": "randint",
	"tags": [],
	"description": "",
	"content": "Returns pseudo-random integer number between a given range.\nThe first argument specifies the start of the range and must have a value less than the second argument when specifies the end of the range. The start is inclusive and the end is exclusive, for example: randint(0, 2) will return either 0 or 1.\nDo not use randint() when the purpose is security related since the linear congruential algorithms used by this function is too easy to break.\n This function does not generate an event.\nFunction randint(start, end)\nArguments    Argument Type Description     start int (required) Start of the range (inclusive).   end int (required) End of the range (exclusive).    Return value A pseudo-random int between start (inclusive) and end (exclusive).\nExample  Some examples on how randint(..) can be used:\n // Return a pseudo-random number between 10 (inclusive) and 20 (exclusive) randint(10, 20); Example return value in JSON format:\n13 "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/range/",
	"title": "range",
	"tags": [],
	"description": "",
	"content": "This function returns a list of numbers, starting from 0 (by default), increments by 1 (by default), and ends at a specified number.\nFunction range() may only be used for relatively small lists. An operation_err() (maximum range length exceeded) will be raised when trying to create a list with more than 1024 numbers.\n Function range(start, stop, step)\nArguments    Argument Type Description     start int (optional) An integer number specifying at which position to start. Default is 0   stop int (required) An integer number specifying at which position to end (exclusive).   step int (optional) An integer number specifying the increment value. Default is 1 and this value must not be zero.    Return value Returns a list of numbers.\nExamples  Return a list with numbers 0 to 5:\n range(6); [0, 1, 2, 3, 4, 5]  Return a list with numbers 0 to 5 but increment by 2:\n range(0, 6, 2); [0, 2, 4]  The step argument may also be a negative value:\n range(2, -3, -1); [2, 1, 0, -1, -2] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/refs/",
	"title": "refs",
	"tags": [],
	"description": "",
	"content": "Returns the reference count of a value.\nGenerally, the count returned is one higher than you might expect, because it includes the (temporary) reference.\nDifferent nodes might return different reference values since the reference counter can be higher or lower depending on how the value is stored and used.\n This function does not generate an event.\nFunction refs(value)\nArguments    Argument Type Description     value any (required) The value to return the reference count for.    Return value Reference count of the given value.\nExample  Returns the reference count of a given value:\n [ refs( 'some string' ), refs( a = b = c = 42 ), ];  Example return value in JSON format\n [ 2, 5 ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/return/",
	"title": "return",
	"tags": [],
	"description": "",
	"content": "The return function moves the argument to the output of the current query/closure call.\nIf no return is specified, then the last value will be the value which is returned. A second argument can be given to the return function which can be used to specify how deep the result should be returned. The default deep value is set to 1, but any value between 0 and 127 is possible. See the deep section for a detailed explanation of this argument.\nA query can run different procedures and/or closures which might have changed the deep value. In case you need to know the current deep value, the function deep() can be used.\nBe careful with using a deep value greater than one, especially when circular references are made since this can result in returning a large amount of data.\n When no arguments are used the return value will be nil.\nThis function does not generate an event.\nFunction return([value[, deep]])\nArguments    Argument Type Description     value any (optional) The value which will be moved to the output of the query or closure.   deep int (optional) Specify the deep value for the query (the current deep value will be overwritten).    Return value The return function has no real return value but will move directly to the output of the current query or closure.\nExample  This code shows how return() can be used:\n // return .colors, two levels deep if .colors exists try(return(.colors, 2)); // if .colors could not be returned, create the property .colors = { aegean: { R: 0x5e, G: 0x8e, B: 0xc9, }, }; return(.colors, 2);  Example return value in JSON format (the #ids might be different)\n { \u0026#34;#\u0026#34;: 23, \u0026#34;aegean\u0026#34;: { \u0026#34;#\u0026#34;: 24, \u0026#34;B\u0026#34;: 201, \u0026#34;G\u0026#34;: 142, \u0026#34;R\u0026#34;: 94 } } Deep To understand the deep argument, suppose you have the following data:\n.artists = [{ artist: \u0026quot;David Bowie\u0026quot;, albums: [{ name: \u0026quot;The Rise and Fall of Ziggy Stardust and the Spiders from Mars\u0026quot;, songs: [{ title: \u0026quot;Five Years\u0026quot;, duration: 4.42 }] }] }]; If you only require the ID\u0026rsquo;s from all .artists and do not any other properties, a value of 0 should be used for deep:\nreturn(.artists, 0); Something like this will be returned. (the ID # might be different since this is auto generated)\n[ { \u0026#34;#\u0026#34;: 34580 } ] Here are some more examples using different values of deep:\n Return the artists, albums will be returned only with (#) ID\u0026rsquo;s:\n .artists; // Uses the default deep value of `1` [ { \u0026#34;#\u0026#34;: 34580, \u0026#34;albums\u0026#34;: [ { \u0026#34;#\u0026#34;: 34581 } ], \u0026#34;artist\u0026#34;: \u0026#34;David Bowie\u0026#34; } ]  Return the artists and albums, songs will be returned only with (#) ID\u0026rsquo;s:\n return(.artists, 2); [ { \u0026#34;#\u0026#34;: 34580, \u0026#34;albums\u0026#34;: [ { \u0026#34;#\u0026#34;: 34581, \u0026#34;name\u0026#34;: \u0026#34;The Rise and Fall of Ziggy Stardust and the Spiders from Mars\u0026#34;, \u0026#34;songs\u0026#34;: [ { \u0026#34;#\u0026#34;: 34582 } ] } ], \u0026#34;artist\u0026#34;: \u0026#34;David Bowie\u0026#34; } ]  Return the artists, albums and songs:\n return(.artists, 3); [ { \u0026#34;#\u0026#34;: 34580, \u0026#34;albums\u0026#34;: [ { \u0026#34;#\u0026#34;: 34581, \u0026#34;name\u0026#34;: \u0026#34;The Rise and Fall of Ziggy Stardust and the Spiders from Mars\u0026#34;, \u0026#34;songs\u0026#34;: [ { \u0026#34;#\u0026#34;: 34582, \u0026#34;duration\u0026#34;: 4.42, \u0026#34;title\u0026#34;: \u0026#34;Five Years\u0026#34; } ] } ], \u0026#34;artist\u0026#34;: \u0026#34;David Bowie\u0026#34; } ]  Use custom Type and the wrap() function to gain more control on which properties to return.\n "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/set/",
	"title": "set",
	"tags": [],
	"description": "",
	"content": "Returns a new empty set. If an array is given, then all items in the given array must be of type thing and a new set is returned based on the given things. Instead of an array, it is also possible to provide one thing or multiple comma-separated things.\nThis function does not generate an event.\nFunction set(array_or_things)\nArguments    Argument Type Description     array_or_things array/things (optional) Optional array or things to initialize the set.    Return value A new set.\nExample  This code shows some return values for set():\n set({name: 'Iris'});  Return value in JSON format\n [ { \u0026#34;name\u0026#34;: \u0026#34;Iris\u0026#34; } ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/set_enum/",
	"title": "set_enum",
	"tags": [],
	"description": "",
	"content": "Creates a new enumerator type.\nThis function generates an event.\nFunction set_enum(enum, members)\nArguments    Argument Type Description     enum str The name of the enumerator type to create.   members thing Thing containing all the members to be set.    Return value The value nil.\nExample  This code shows how to use set_enum():\n set_enum('Status', { OK: 0, NOK: -1 });  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/set_type/",
	"title": "set_type",
	"tags": [],
	"description": "",
	"content": "Defines the properties of a Type. Function set_type works only on a new Type. Use mod_type() if you want to change an existing Type, see mod_type.\nThis function generates an event.\nFunction set_type(type, value)\nArguments    Argument Type Description     type str The name of the Type where the properties have to be set.   value thing Thing containing all the properties to be set.    Return value The value nil.\nExample  This code shows how to use set_type():\n set_type('Person', { name: 'str', age: 'uint', hobbies: '[str]' });  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/str/",
	"title": "str",
	"tags": [],
	"description": "",
	"content": "Convert a value to a string. If no value is given, an empty string \u0026quot;\u0026quot; is returned.\nWhen bytes are converted to str then the data will be checked if it contains valid UTF-8 characters. If this is not the case, a value_err() will be raised.\nThis function does not generate an event.\nFunction str(value)\nArguments    Argument Type Description     value any (optional) The value to create a string from.    Return value A new string\nExample  This code shows some return values for str():\n [ str(), str(42), str(true) ];  Return value in JSON format\n [ \u0026#34;\u0026#34;, \u0026#34;42\u0026#34;, \u0026#34;true\u0026#34; ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/thing/",
	"title": "thing",
	"tags": [],
	"description": "",
	"content": "Returns a thing from a specified value, that may be dynamic. If no value is given, a new thing is returned.\nThis function does not generate an event.\nFunction thing([id])\nArguments    Argument Type Description     id int (optional) The id for the thing to return.    Return value Returns a thing. A lookup_err() is returned in case an id is given which is not found inside the collection.\nExample  This code shows an example usage of thing():\n .greet = \u0026quot;Hello world!\u0026quot;; [ thing(.id()), thing(), ];  Example return value in JSON format\n [ { \u0026#34;#\u0026#34;: 42, \u0026#34;greet\u0026#34;: \u0026#34;Hello world!\u0026#34; }, {} ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/try/",
	"title": "try",
	"tags": [],
	"description": "",
	"content": "Try a statement and if the statement fails with an error, then the error is returned. It is also possible to catch only specific errors.\nIt is not possible to catch internal errors. Such errors should never happen, unless something is really wrong with at least one node.\n This function does not generate an event.\nFunction try(statement, [e0, e1, ..., eX])\nArguments    Argument Type Description     statement any (required) The statement to try.   e0, e1, \u0026hellip;, eX int/raw (optional) Only catch specific errors, if omitted, catch all errors. Both error codes and names are accepted.    Return value The value for the specified statement, or an error if the statement has failed.\nExample  This code shows some return values for try():\n [ iserr( try( x = (1/0) )), iserr( try( (1/0), zero_div_err() )), ];  Return value in JSON format\n [ true, true ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/type/",
	"title": "type",
	"tags": [],
	"description": "",
	"content": "Returns the type name of a value.\nThis function does not generate an event.\nFunction type(value)\nArguments    Argument Type Description     value any (required) The value to return the type name for.    Return value Type name of the given value.\nExample  Returns the type name of a given value:\n [ type( nil ), type( 42 ), type( 3.14 ), ];  Example return value in JSON format\n [ \u0026#34;nil\u0026#34;, \u0026#34;int\u0026#34;, \u0026#34;float\u0026#34; ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/type_count/",
	"title": "type_count",
	"tags": [],
	"description": "",
	"content": "Returns the number of instances of a given Type within a collection.\nThis function does not generate an event.\nFunction type_count(type)\nArguments    Argument Type Description     type str The name of the Type for which the number of instances must be returned.    Return value An int representing the number of occurrences.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/type_info/",
	"title": "type_info",
	"tags": [],
	"description": "",
	"content": "Returns information about a given Type.\n   Value Description     type_id Internal Type ID (can be used to identify Types in collection events).   created_at Time Stamp when the Type is created.   modified_at Time Stamp when the Type is last modified or nil if never modified.   name Type\u0026rsquo;s name.   fields Array with arrays containing two strings, the property name and definition.    The modified_at time stamp is initially set to nil when the Type is created using the new_type(..) function. It will be updated with a time stamp after modifying the Type with either the set_type(..) or the mod_type(..) function. When the Type is created with set_type(..), then the modified_at property will be equal to created_at.\n This function does not generate an event.\nFunction type_info(type)\nArguments    Argument Type Description     type str The name of the Type for which the information about the properties has to be returned.    Return value Returns info about the Type.\nExample  This code shows the output of type_info():\n // Just a Type as an example set_type('Book', { title: 'str', year: 'int', }); // Return Type info type_info('Book');  Example return value in JSON format\n { \u0026#34;type_id\u0026#34;: 0, \u0026#34;created_at\u0026#34;: 1579175900, \u0026#34;modified_at\u0026#34;: 1579175900, \u0026#34;name\u0026#34;: \u0026#34;Book\u0026#34;, \u0026#34;fields\u0026#34;: [ [\u0026#34;title\u0026#34;, \u0026#34;str\u0026#34;], [\u0026#34;year\u0026#34;, \u0026#34;int\u0026#34;] ] } "
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/types_info/",
	"title": "types_info",
	"tags": [],
	"description": "",
	"content": "Returns Type information about all the Types within a collection.\nSee the type_info() function documentation for an example of the exposed Type information.\nThis function does not generate an event.\nFunction types_info()\nArguments None\nReturn value List with Type info about all Types in the collection.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/collection-api/wse/",
	"title": "wse",
	"tags": [],
	"description": "",
	"content": "Stored closures which can potentially make changes to ThingsDB are called closures with side effects and must be wrapped with the wse(..) function. This allows ThingsDB before running the query to make an event.\nYou should use wse only when required, otherwise this would lead to unnecessary events.\n This function generates an event.\nFunction wse(statement)\nArguments    Argument Type Description     statement any Statement or block to wrap.    Return value Return value of the given statement.\nExample  This code shows an example usage for wse():\n // Suppose we have a closure with side-effects .take_license = || .licenses -= 1; // And we have some initial licenses .licenses = 99; wse({ // without wse() this would raise an error .take_license(); }); // Return the number of licenses left .licenses;  Return value in JSON format\n 98 "
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/",
	"title": "Node API",
	"tags": [],
	"description": "",
	"content": "Node API The node scope can be used to query node statistics, counters or make node specific changes.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/backup_info/",
	"title": "backup_info",
	"tags": [],
	"description": "",
	"content": "Returns information about a specific scheduled backup.\n   Value Description     created_at Time Stamp when the backup schedule is created.   file_template Backup file template.   id Backup ID.   next_run Only available when the backup job is scheduled to run. Contains a string with date/time for the next planned schedule, or pending when the backup is scheduled to start.   repeat Only available when the backup will repeat. Contains an integer value representing the repeat time in seconds.   result_code Only available if the backup job has started at least once. Contains the last result code. (0 when successful)   result_message Only available if the backup job has started at least once. Contains the last result message.    This function does not generate an event.\nFunction backup_info(ID);\nArguments    Argument Type Description     ID int ID of the backup schedule to return info for.    Return value Example   // Return backup info of scheduled backup with ID 0: backup_info(0);  Example result in JSON format:\n { \u0026#34;created_at\u0026#34;: 1579175900, \u0026#34;file_template\u0026#34;: \u0026#34;/var/backup/thingsdb_{DATE}{TIME}.tar.gz\u0026#34;, \u0026#34;id\u0026#34;: 0, \u0026#34;next_run\u0026#34;: \u0026#34;2019-12-10 23:00:00Z\u0026#34;, \u0026#34;repeat\u0026#34;: 86400, \u0026#34;result_code\u0026#34;: 0, \u0026#34;result_message\u0026#34;: \u0026#34;success - 2019-12-09 23:01:13Z\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/backups_info/",
	"title": "backups_info",
	"tags": [],
	"description": "",
	"content": "Returns backup schedule information about all backup schedules in the selected node scope.\nSee the backup_info() function documentation for an example of the exposed backup schedule information.\nThis function does not generate an event.\nFunction backups_info()\nArguments None\nReturn value List with backup schedule info about all backup schedules in the selected node scope.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/counters/",
	"title": "counters",
	"tags": [],
	"description": "",
	"content": "Returns counters for the ThingsDB node in the selected scope. Counters start all at zero when ThingsDB is started, or when the counters are reset by using reset_counters()'.\nCounters give information about things, queries and events. If you suspect failed queries, then the counters might provide you with more information.\n   Counter Description     average_event_duration The average event duration in seconds. Event duration is measured from the time an event is created (before the final ID is assigned), until the actual event is committed to ThingsDB.   average_query_duration The average query duration in seconds. Query duration is measured from the time a query (or procedure run) request is unpacked, until the response is created to send back to the client.   events_committed Events committed since last the counters reset.   events_failed Failed events. This is a critical counter which should be 0.   events_killed Killed events took too long for receiving the READY status. These events may be processed later.   events_quorum_lost Number of times this node did not get an event ID accepted by the quorum of nodes. An event ID will not be accepted if another node is attempting to assign the same event ID. This is not an issue since the node will just try another event ID. It only indicates the number of collisions occurred while trying to assign an event ID.   events_skipped Events which cannot be committed since an event with a higher id is already processed.   events_unaligned Number of times an event cannot be pushed to the end of the queue and needs re-ordering.   events_with_gap Events which are committed but at least one event id was skipped.   garbage_collected Number of things which are garbage collected.   longest_event_duration Longest event duration, in seconds.   longest_query_duration Longest query duration, in seconds.   queries_success Number of queries where this node acted as the master node and the query has successful finished.   queries_with_error Number of queries where this node acted as the master node but the query has returned with an error.   started_at UNIX time-stamp in seconds when the counters started counting. See reset_counters().   watcher_failed The value is increased if an update could not be forwarded to a registered watcher.    This function does not generate an event.\nFunction counters();\nArguments None\nReturn value Returns the current counter values.\nExample  This code will return node counter values:\n // Returns the current counters for the node in this scope counters();  Example return value in JSON format\n { \u0026#34;average_event_duration\u0026#34;: 0.0002218758461538461, \u0026#34;average_query_duration\u0026#34;: 0.00007062491772151898, \u0026#34;events_committed\u0026#34;: 26, \u0026#34;events_failed\u0026#34;: 0, \u0026#34;events_killed\u0026#34;: 0, \u0026#34;events_quorum_lost\u0026#34;: 0, \u0026#34;events_skipped\u0026#34;: 0, \u0026#34;events_unaligned\u0026#34;: 0, \u0026#34;events_with_gap\u0026#34;: 0, \u0026#34;garbage_collected\u0026#34;: 0, \u0026#34;longest_event_duration\u0026#34;: 0.000295981, \u0026#34;longest_query_duration\u0026#34;: 0.000152664, \u0026#34;queries_success\u0026#34;: 159, \u0026#34;queries_with_error\u0026#34;: 0, \u0026#34;started_at\u0026#34;: 1590496024, \u0026#34;watcher_failed\u0026#34;: 0 } "
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/del_backup/",
	"title": "del_backup",
	"tags": [],
	"description": "",
	"content": "Delete a scheduled backup. If the scheduled backup was pending, the backup job will be cancelled.\nFiles associated with the backup will not be removed. Only the schedule will be deleted.\n This function does not generate an event.\nFunction del_backup(ID);\nArguments    Argument Type Description     ID int Backup ID to delete.    Return value Returns nil.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/has_backup/",
	"title": "has_backup",
	"tags": [],
	"description": "",
	"content": "Determines if a backup exists in ThingsDB.\nThis function does not generate an event.\nFunction has_backup(ID)\nArguments    Argument Type Description     ID int (required) Backup ID to check.    Return value Returns true if a backup with a given ID exists and otherwise false.\nExample  This code shows an example use case of has_backup():\n has_backup(123);  Return value in JSON format\n false "
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/new_backup/",
	"title": "new_backup",
	"tags": [],
	"description": "",
	"content": "Schedule a new backup.\nBackups are created using tar and gzip. Once a backup is made, the .tar.gz backup file can be used to recover ThingsDB, or can be used to load the ThingsDB into another node. The result value is a backup ID. This ID can be used by backup_info(..) for details about the backup schedule job, or can be used to delete the backup schedule.\nRestoring from a backup file can be done with either the restore(..) function or by starting the node from a backup file. See the example recovery section below on how to start a node from a backup file.\nAt least two nodes are required to create a new backup schedule. This is required because ThingsDB needs to enter away mode to actually create the backup and this happens only with two or more nodes.\n This function does not generate an event.\nFunction new_backup(file_template, [start_ts, [repeat]]);\nArguments    Argument Type Description     file_template str Backup schedule file template. See file-template for more information.   start_ts nil/int/float/raw (optional) Start date/time of the backup. If no start_ts is given, the backup starts as soon as possible.   repeat int (optional) Repeat the backup schedule every repeat seconds. If no repeat value is set, the backup job will run only once.    File template Backup file templates should end with .tar.gz. They may contain some template variable for creating unique file names.\n   Variable description     {DATE} Current date using format %Y%m%d, for example 20191209.   {TIME} Current time using format %H%M%S, for example 165730.   {EVENT} Last committed event ID, for example 123456.    An example file-name could be /tmp/backup_{EVENT}.tar.gz.\nReturn value Returns the backup ID for the scheduled backup.\nExample  Use new_backup to schedule a ThingsDB backup:\n // Create a new backup immediately, then at 23:00 and then repeat each day new_backup('/var/backup/thingsdb_{DATE}{TIME}.tar.gz', '2000-01-01 23:00', 24*3600);  Example result in JSON format:\n 0 Example recovery To start a ThingsDB node data from a backup file, the following steps can be done\n# Unpack a backup file in some storage directory. tar -xzf backup.tar.gz # Start ThingsDB with the current path as storage path THINGSDB_STORAGE_PATH=./ thingsdb --forget-nodes  Confirm with yes so we can start with a single node\n Warning: all nodes information will be lost!! Type `yes` + ENTER if you really want to continue: yes Done!\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/node_info/",
	"title": "node_info",
	"tags": [],
	"description": "",
	"content": "Returns information about the node in the selected scope. See scopes for more information on how to target a specific node scope.\n   Value Description     archive_files Number of archive files. May decrease after a full store during away mode.   archived_in_memory Number of events which are archived in memory.   cached_names Number of names cached in memory.   client_port Listening for client TCP socket connections on this port.   connected_clients Number of connected clients to the node.   db_stored_event_id Last stored event ID in full database store.   events_in_queue Events which are pending in the queue.   global_committed_event_id Lowest known committed event ID by all nodes.   global_stored_event_id Lowest known stored event ID by all nodes.   http_api_port Listening to this HTTP port for API calls.   http_status_port Listening to this HTTP port for status, readiness and liveness requests.   ip_support Enabled IP support. May be IPv4/IPv6 or both.   libcleri_version Cleri language parser library version.   libpcre2_version PCRE regular expression library version.   libuv_version UV asynchronous library version.   local_committed_event_id Last committed event ID on the node.   local_stored_event_id Last stored event ID on disk. Store takes place when in away mode.   log_level Current log level for the node. May be changed at runtime using set_log_level(..)   msgpack_version MessagePack data protocol library version.   next_event_id Next free event ID.   next_thing_id Next free things ID.   node_id The id which is assigned to the node.   node_name This node will publish itself to other nodes using the node name. This can be an IP address, hostname, or a fully qualified domain name (FQDN) of the node.   node_port Listening for node TCP socket connections on this port.   scheduled_backups Number of backups scheduled on this node. Only repeated backups or backups which are planned in the future are included.   status Current status of the ThingsDB node.   storage_path Path used for storing ThingsDB data.   syntax_version Language or syntax version. A new version of ThingsDB might also have a new language version.   uptime Uptime of the node in seconds.   version Version of ThingsDB.   yajl_version JSON parser library version.   zone Zone number to which the node is assigned. May be changed in the ThingsDB configuration file.    This function does not generate an event.\nFunction node_info()\nArguments None\nReturn value Returns info about the node. Which node is defined by the scope.\nExample  This code returns info for the connected node:\n node_info();  Example return value in JSON format\n { \u0026#34;archive_files\u0026#34;: 1, \u0026#34;archived_in_memory\u0026#34;: 0, \u0026#34;cached_names\u0026#34;: 2, \u0026#34;client_port\u0026#34;: 9200, \u0026#34;connected_clients\u0026#34;: 1, \u0026#34;db_stored_event_id\u0026#34;: 1, \u0026#34;events_in_queue\u0026#34;: 0, \u0026#34;global_committed_event_id\u0026#34;: 2, \u0026#34;global_stored_event_id\u0026#34;: 2, \u0026#34;node_name\u0026#34;: \u0026#34;node0.local\u0026#34;, \u0026#34;http_api_port\u0026#34;: 9210, \u0026#34;http_status_port\u0026#34;: \u0026#34;disabled\u0026#34;, \u0026#34;ip_support\u0026#34;: \u0026#34;ALL\u0026#34;, \u0026#34;libcleri_version\u0026#34;: \u0026#34;0.12.1\u0026#34;, \u0026#34;libpcre2_version\u0026#34;: \u0026#34;10.32\u0026#34;, \u0026#34;libuv_version\u0026#34;: \u0026#34;1.24.1\u0026#34;, \u0026#34;local_committed_event_id\u0026#34;: 2, \u0026#34;local_stored_event_id\u0026#34;: 2, \u0026#34;log_level\u0026#34;: \u0026#34;WARNING\u0026#34;, \u0026#34;msgpack_version\u0026#34;: \u0026#34;3.2.0\u0026#34;, \u0026#34;next_event_id\u0026#34;: 3, \u0026#34;next_thing_id\u0026#34;: 5, \u0026#34;node_id\u0026#34;: 0, \u0026#34;node_port\u0026#34;: 9220, \u0026#34;scheduled_backups\u0026#34;: 0, \u0026#34;status\u0026#34;: \u0026#34;READY\u0026#34;, \u0026#34;storage_path\u0026#34;: \u0026#34;/var/lib/thingsdb/\u0026#34;, \u0026#34;syntax_version\u0026#34;: \u0026#34;v0\u0026#34;, \u0026#34;uptime\u0026#34;: 7.854678630828857, \u0026#34;version\u0026#34;: \u0026#34;0.2.13\u0026#34;, \u0026#34;yajl_version\u0026#34;: \u0026#34;2.1.0\u0026#34;, \u0026#34;zone\u0026#34;: 0 } "
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/nodes_info/",
	"title": "nodes_info",
	"tags": [],
	"description": "",
	"content": "Returns information about all ThingsDB nodes.\n   Value Description     node_name A node will publish itself to other nodes using the node name. This can be for example an IP address, hostname , or a fully qualified domain name (FQDN) of the node.   committed_event_id Last known committed event ID on the node.   next_thing_id Next free thing ID on the node.   node_id ID which is assigned to the node.   port TCP port on which the node is listening for node connections.   status Current status of the node.   stored_event_id Last known stored event ID on the node.   syntax_version Language or syntax version which is running on the node.   zone Zone number to which the node is assigned.    This function does not generate an event.\nFunction nodes_info()\nArguments None\nReturn value List with node info about all nodes in ThingsDB.\nExample  This code returns info about all ThingsDB nodes:\n nodes_info();  Example return value in JSON format\n [ { \u0026#34;address\u0026#34;: \u0026#34;node0.local\u0026#34;, \u0026#34;committed_event_id\u0026#34;: 4, \u0026#34;next_thing_id\u0026#34;: 5, \u0026#34;node_id\u0026#34;: 0, \u0026#34;port\u0026#34;: 9220, \u0026#34;status\u0026#34;: \u0026#34;READY\u0026#34;, \u0026#34;stored_event_id\u0026#34;: 4, \u0026#34;stream\u0026#34;: null, \u0026#34;syntax_version\u0026#34;: \u0026#34;v0\u0026#34;, \u0026#34;zone\u0026#34;: 0 }, { \u0026#34;address\u0026#34;: \u0026#34;node1.local\u0026#34;, \u0026#34;committed_event_id\u0026#34;: 4, \u0026#34;next_thing_id\u0026#34;: 5, \u0026#34;node_id\u0026#34;: 1, \u0026#34;port\u0026#34;: 9220, \u0026#34;status\u0026#34;: \u0026#34;READY\u0026#34;, \u0026#34;stored_event_id\u0026#34;: 4, \u0026#34;stream\u0026#34;: \u0026#34;\u0026lt;node-out:1\u0026gt; 192.168.0.10:9220\u0026#34;, \u0026#34;syntax_version\u0026#34;: \u0026#34;v0\u0026#34;, \u0026#34;zone\u0026#34;: 0 } ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/reset_counters/",
	"title": "reset_counters",
	"tags": [],
	"description": "",
	"content": "Resets the counters for the ThingsDB node you are connected too. Other nodes are not affected. This will set the started_at counter value to the current UNIX time-stamp in seconds and all other counters to 0 (zero).\nThis function does not generate an event.\nFunction reset_counters();\nArguments None\nReturn value Returns nil.\nExample  This code will reset the counters on a node:\n // resets counters on the node in this scope reset_counters();  Example return value in JSON format (the new collection id)\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/set_log_level/",
	"title": "set_log_level",
	"tags": [],
	"description": "",
	"content": "Change the log level for the node in the selected scope.\nThingsDB will then log all levels greater than or equal to the specified level. For example, a default log_level of warning will log warning, error and critical messages.\nThis function does not generate an event.\nLog Levels    Name Int Description     DEBUG 0 Display debug messages (can result in large amount of logging).   INFO 1 Informational messages.   WARNING 2 Warning messages (default log level).   ERROR 3 Error messages, can occur if for example a node is not available.   CRITICAL 4 Critical messages, should never occur unless something is really wrong.    Function set_log_level(log_level);\nArguments    Argument Type Description     log_level int Log level to set on the node.    Return value Returns nil.\nExample  Change the log level on the node in the selected scope to debug:\n // Enable `debug` logging on the node in the selected scope set_log_level(DEBUG);  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/node-api/shutdown/",
	"title": "shutdown",
	"tags": [],
	"description": "",
	"content": "Shutdown the node in the selected scope. This is a clean shutdown, allowing all other nodes (and clients) to disconnect.\nAt least MODIFY privileges on the @node scope are required to shutdown a node.\n This function does not generate an event.\nFunction shutdown();\nArguments None.\nReturn value Returns nil.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/",
	"title": "ThingsDB API",
	"tags": [],
	"description": "",
	"content": "ThingsDB API ThingsDB can be managed with simple query commands. This allows you to manage collections, users, access and nodes.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/collection_info/",
	"title": "collection_info",
	"tags": [],
	"description": "",
	"content": "Returns information about a specific collection.\nThis function requires READ privileges on the requested collection, or MODIFY privileges on the @thingsdb scope.\nThis function does not generate an event.\nFunction collection_info(name_or_id);\nArguments    Argument Type Description     name_or_id str/int Name or Id of the collection    Return value Returns info about the collection.\nExample  Returns information about collection stuff:\n collection_info('stuff');  Example return value in JSON format\n { \u0026#34;collection_id\u0026#34;: 782, \u0026#34;created_at\u0026#34;: 1579175900, \u0026#34;name\u0026#34;: \u0026#34;stuff\u0026#34;, \u0026#34;things\u0026#34;: 61352 } "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/collections_info/",
	"title": "collections_info",
	"tags": [],
	"description": "",
	"content": "Returns collection information about all collections in ThingsDB.\nSee the collection_info() function documentation for an example of the exposed collection information.\nIf the user has no MODIFY permissions on the @thingsdb scope, then only the collections where the user has at least READ privileges are included in the result.\n This function does not generate an event.\nFunction collections_info()\nArguments None\nReturn value List with collection info about all collections in ThingsDB.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/del_collection/",
	"title": "del_collection",
	"tags": [],
	"description": "",
	"content": "Delete a collection.\nThis function generates an event.\nFunction del_collection(name);\nArguments    Argument Type Description     name str (required) Name of the collection to delete.    Return value Returns nil when successful. A lookup_err() is raised if the collection does not exist.\nExample  This code will delete collection stuff:\n // Delete collection `stuff` del_collection('stuff'); "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/del_expired/",
	"title": "del_expired",
	"tags": [],
	"description": "",
	"content": "Delete all expired tokens.\nThis function requires GRANT privileges on the @thingsdb scope.\n This function generates an event.\nFunction del_expired();\nArguments None\nReturn value Returns nil.\nExample  This code will delete all expired tokens:\n // Delete all expired tokens del_expired(); "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/del_node/",
	"title": "del_node",
	"tags": [],
	"description": "",
	"content": "Delete a node from ThingsDB.\nBefore deleting a node, the node must be offline. As long is the node is active, you are not allowed to delete the node. See shutdown for shutting down a node by using a query.\n This function generates an event.\nFunction del_node(node_id);\nArguments    Argument Type Description     node_id int (required) Id of the node to delete.    Return value Returns nil when successful. A lookup_err() is raised if the node id does not exist.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/del_token/",
	"title": "del_token",
	"tags": [],
	"description": "",
	"content": "Delete a token.\nThis function requires GRANT privileges on the @thingsdb scope unless the given token belongs to the logged on user. In the latter case, only MODIFY privileges are required.\n This function generates an event.\nFunction del_token(key);\nArguments    Argument Type Description     key str (required) Token key to delete.    Return value Returns nil when successful. A lookup_err() is raised if the token is not found.\nExample  This code will delete a token:\n // Delete a token del_token('XXXXXXXXXXXXXXXXXXXXXX'); "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/del_user/",
	"title": "del_user",
	"tags": [],
	"description": "",
	"content": "Delete a user. It is not possible to delete your own user account and a bad_data_err() will be raised in case you try to. Any tokens associated with the user will also be deleted.\nThis function requires GRANT privileges on the @thingsdb scope.\n This function generates an event.\nFunction del_user(username);\nArguments    Argument Type Description     username str (required) Username of the user to delete.    Return value Returns nil when successful. A lookup_err() is raised if the user does not exist.\nExample  This code will delete user test:\n // Delete user `test` del_user('test'); "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/grant/",
	"title": "grant",
	"tags": [],
	"description": "",
	"content": "Grant, collection or general, privileges to a user. Access to a user is provided by setting a bit mask to either the @node, @thingsdb or a @collection scope.\nTo use this function, at least MODIFY privileges on the @thingsdb scope and GRANT privileges on the target scope are required.\nIt is not possible to set privileges on a specific node scope. Therefore scope @node will apply to all nodes in ThingsDB.\n The following pre-defined masks are available:\n   Mask Description     READ (1) Gives read access.   MODIFY (2) Gives read and modify access.   GRANT (4) Gives read, modify and grant (and revoke) privileges.   WATCH (8) Gives watch (and un-watch) privileges.   RUN (16) Gives run procedures access.   FULL (31) A mask for full privileges.    It is not possible to have GRANT privileges without also having MODIFY privileges. Similarly, it is not possible to have MODIFY privileges without READ. However, ThingsDB automatically applies the required privileges so when setting for example GRANT privileges, ThingsDB makes sure that the user also gets MODIFY and READ.\n This function generates an event.\nFunction grant(target, user, mask);\nArguments    Argument Type Description     target int/raw Can be either the @node, @thingsdb, or a @collection scope.   user str User to grant privileges to.   mask int Bit-mask for setting privileges.    Return value Returns nil when successful. A lookup_err() is raised if the user or target does not exist.\nExample  Grant read and watch privileges to user iris to collection stuff:\n new_user('iris'); new_token('iris'); // Assign WATCH privileges on all node scopes to user `iris` grant('@node', 'iris', WATCH); // Assign READ and WATCH privileges on collection `stuff` to user `iris` grant('@:stuff', 'iris', READ|WATCH);  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/has_collection/",
	"title": "has_collection",
	"tags": [],
	"description": "",
	"content": "Determines if a collection exists in ThingsDB.\nThis function does not generate an event.\nFunction has_collection(name_or_id)\nArguments    Argument Type Description     name_or_id str/int (required) Collection name or id to check.    Return value Returns true if the collection exists and otherwise false.\nExample  This code shows an example use case of has_collection():\n has_collection('stuff');  Return value in JSON format\n true "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/has_node/",
	"title": "has_node",
	"tags": [],
	"description": "",
	"content": "Determines if a node exists in ThingsDB.\nThis function does not generate an event.\nFunction has_node(id)\nArguments    Argument Type Description     id int (required) Node id to check.    Return value Returns true if a node with a given id exists and otherwise false.\nExample  This code shows an example use case of has_node():\n has_node(0);  Return value in JSON format\n true "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/has_token/",
	"title": "has_token",
	"tags": [],
	"description": "",
	"content": "Determines if a token exists in ThingsDB.\nThis function requires GRANT privileges on the @thingsdb scope.\n This function does not generate an event.\nFunction has_token(key)\nArguments    Argument Type Description     key str (required) Token key to check.    Return value Returns true if the token exists and otherwise false.\nExample  This code shows an example use case of has_token():\n has_token('XXXXXXXXXXXXXXXXXXXXXX');  Return value in JSON format\n false "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/has_user/",
	"title": "has_user",
	"tags": [],
	"description": "",
	"content": "Determines if a user exists in ThingsDB.\nThis function requires GRANT privileges on the @thingsdb scope.\n This function does not generate an event.\nFunction has_user(username)\nArguments    Argument Type Description     username str (required) User to check.    Return value Returns if true the user exists and otherwise false.\nExample  This code shows an example use case of has_user():\n has_user('admin');  Return value in JSON format\n true "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/new_collection/",
	"title": "new_collection",
	"tags": [],
	"description": "",
	"content": "Create a new collection.\nThis function generates an event.\nFunction new_collection(name);\nArguments    Argument Type Description     name str (required) Name of the new collection.    The user who has created the collection will automatically receive full access rights to the new collection. Use grant to give other users access to the collection.\n Return value Returns the new collection id if successful. A lookup_err() is raised if the collection already exists.\nExample  This code will create a collection \u0026ldquo;awesome_things\u0026rdquo;:\n // Creates a new collection new_collection('awesome_things');  Example return value in JSON format (the new collection id)\n 31415 "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/new_node/",
	"title": "new_node",
	"tags": [],
	"description": "",
	"content": "Adds a new node to ThingsDB. Nodes are used for scaling and high availability.\nBefore using this command, make sure another node is started and waiting for a join. This can be done by starting thingsdb with the --secret argument, for example:\nthingsdb --secret \u0026#34;my-one-time-secret\u0026#34; Next, you will see something like this:\nWaiting for an invite from a node to join ThingsDB... You can use the following query to add this node: new_node(\u0026#39;my-one-time-secret\u0026#39;, \u0026#39;node.local\u0026#39;, 9220); Now you can use the new_node(..) function to add the node to ThingsDB.\nThis function generates an event.\nFunction new_node(secret, name [, port]);\nArguments    Argument Type Description     secret str (required) Secret used to initially connect to the new node.   name str (required) Node name (host-name or IP address) of the new node.   port int (optional) Node port (listen_node_port), an integer between 0 an 65535, default 9220.    Best practice is to set the argument \u0026ldquo;name\u0026rdquo; to the same name as specified by the environment variable THINGSDB_NODE_NAME or the node_name found in the configuration file (view the chapter on configuration).\n Return value Returns the new node id if successful.\nExample  Add a new node to ThingsDB:\n // ThingsDB must be started on node2 using the `--secret ...` argument new_node('my-one-time-secret', 'node2.local');  Example return value in JSON format (the new node id)\n 1 "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/new_token/",
	"title": "new_token",
	"tags": [],
	"description": "",
	"content": "Adds a new token for a given user. An optional expiration time may be given; after this time the token cannot be used anymore. Use del_expired to cleanup expired tokens. The expiration time may be given as a UNIX time-stamp in seconds or a date/time string.\nSome valid date/time strings:\n 2021-01-01 2023-02-06 14:30 2023-07-05T13:23:20+01:00  Expiration dates in the past are not allowed an will raise a bad_data_err() error.\nIt is also possible to set a description for the token which can be used to identify the token. If you only want to set a description, but no expiration time, then you can use nil as a second argument. For example: new_token('my_user', nil, 'some nice description');\nThere can be no more than 128 tokens assigned to a single user. A max_quota_err() is raised if this limit is reached. Existing tokens can be removed with del_token and to view the current tokens you can use the user_info(..) (or users_info()) function.\nThis function requires GRANT privileges on the @thingsdb scope when a username other then the logged in user is given as argument. For the currently logged in user, MODIFY privileges on the @thingsdb scope are sufficient.\n This function generates an event.\nFunction new_token(username, [, expiration_time] [, description]);\nArguments    Argument Type Description     username str (required) Name of the user.   expiration_time nil/int/float/raw (optional) Expiration date of the token.   description str (optional) Token description.    Return value Returns the new token key.\nExample  Create a new token for user admin:\n // A new token with an expiration date and description new_token('admin', now() + 7*24*3600, 'token for one week');  Example return value in JSON format (the token key)\n \u0026#34;8Ay0ngISFa9je3o/MMu24U\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/new_user/",
	"title": "new_user",
	"tags": [],
	"description": "",
	"content": "Creates a new user to ThingsDB. The new user is created without a password, token and access privileges. You probably want to set a password or add a new token, and assign some privileges using grant(\u0026hellip;).\nThis function requires GRANT privileges on the @thingsdb scope.\n This function generates an event.\nFunction new_user(user);\nArguments    Argument Type Description     user str (required) Username, between 1 and 128 graphical characters.    Return value Returns the new user id if successful. A lookup_err() is raised if the user already exists.\nExample  Create a new user iris:\n new_user('iris');  Example return value in JSON format (the new user id)\n 19 "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/rename_collection/",
	"title": "rename_collection",
	"tags": [],
	"description": "",
	"content": "Rename a collection.\nThis function generates an event.\nFunction rename_collection(current_name, new_name);\nArguments    Argument Type Description     current_name str (required) Current collection name.   new_name str (required) New name for the collection.    Return value Returns nil when successful.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/rename_user/",
	"title": "rename_user",
	"tags": [],
	"description": "",
	"content": "Rename a user.\nThis function requires GRANT privileges on the @thingsdb scope.\n This function generates an event.\nFunction rename_user(current_name, new_name);\nArguments    Argument Type Description     current_name str (required) Current user name.   new_name str (required) New name for the user.    Return value Returns nil when successful.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/restore/",
	"title": "restore",
	"tags": [],
	"description": "",
	"content": "Restore from a backup file created with the new_backup function.\nBefore using this function the following list of requirements must be must be fulfilled:\n The user performing the restore must have FULL privileges on the@thingsdb scope. No collections may exists. Use collections_info() and del_collection(..) to remove existing collections. All nodes must be online and ready. If this is not the case, then either remove the node or wait for the node to become ready. Use nodes_info() to check for the status of the nodes. When having multiple nodes, all committed events must be stored as well.  After running this function, all existing users and tokens will be overwritten, including the user performing the restore.\n This function generates an event.\nFunction restore(fn);\nArguments    Argument Type Description     fn str Tar file containing the backup, usually a file ending with .tar.gz.    Return value Returns nil when successful.\nExample  Restore from a backup file\n restore('/tmp/backup.tar.gz');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/revoke/",
	"title": "revoke",
	"tags": [],
	"description": "",
	"content": "Revoke, collection or general, privileges from a user. See grant for more information on how access privileges can be set for a user.\nTo use this function, at least MODIFY privileges on the @thingsdb scope and GRANT privileges on the target scope are required.\nThis function generates an event.\nFunction revoke(target, user, mask);\nArguments    Argument Type Description     target int/raw Can be either the @node, @thingsdb, or a @collection scope.   user str User to revoke privileges from.   mask int Bit-mask for revoking privileges.    Return value Returns nil when successful. A lookup_err() is raised if the user or target does not exist.\nExample  Revoke all privileges for user iris on collection stuff:\n revoke('@:stuff', 'iris', FULL);  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/set_password/",
	"title": "set_password",
	"tags": [],
	"description": "",
	"content": "Change a user\u0026rsquo;s password. This function can also be used to remove an existing password by using nil as the new password.\nPasswords must contain 1 to 128 printable characters.\nThis function requires GRANT privileges on the @thingsdb scope when a username other then the logged in user is given as argument. For the currently logged in user, MODIFY privileges on the @thingsdb scope are sufficient.\n This function generates an event.\nFunction set_password(username, new_password);\nArguments    Argument Type Description     username str (required) Name of the user   new_password nil/str (required) New password or nil    Return value Returns nil if successful. A lookup_err() is returned if the user does not exist and bad_data_err() if the new password is not compliant.\nExample  This code changes the password for user admin:\n // Change the password for user `admin` set_password('admin', 'my_secret_password');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/user_info/",
	"title": "user_info",
	"tags": [],
	"description": "",
	"content": "Returns information about a user. If no argument is given, this function will return information about the currently logged in user.\nThis function requires GRANT privileges on the @thingsdb scope when a username other then the logged in user is given as argument. For the currently logged in user, READ privileges on the @thingsdb scope are sufficient.\n This function does not generate an event.\nFunction user_info([username]);\nArguments    Argument Type Description     username str (optional) Name of the user    Return value Returns info about the user.\nExample  This code returns info for the authenticated user:\n // Without a `username`, info about the currently logged in user is returned user_info();  Example output in JSON format:\n { \u0026#34;access\u0026#34;: [ { \u0026#34;privileges\u0026#34;: \u0026#34;FULL\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;@node\u0026#34; }, { \u0026#34;privileges\u0026#34;: \u0026#34;FULL\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;@thingsdb\u0026#34; }, { \u0026#34;privileges\u0026#34;: \u0026#34;FULL\u0026#34;, \u0026#34;scope\u0026#34;: \u0026#34;@collection:stuff\u0026#34; } ], \u0026#34;created_at\u0026#34;: 1573981254, \u0026#34;has_password\u0026#34;: true, \u0026#34;name\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;tokens\u0026#34;: [ { \u0026#34;created_on\u0026#34;: \u0026#34;2019-11-17 09:25:36Z\u0026#34;, \u0026#34;expiration_time\u0026#34;: \u0026#34;2020-11-17 09:25:36Z\u0026#34;, \u0026#34;key\u0026#34;: \u0026#34;QpVmHOsfQaKKpjpOkW0SUt\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;OK\u0026#34; } ], \u0026#34;user_id\u0026#34;: 1 } "
},
{
	"uri": "https://docs.thingsdb.net/v0/thingsdb-api/users_info/",
	"title": "users_info",
	"tags": [],
	"description": "",
	"content": "Returns user information about all users in ThingsDB.\nSee the user_info() function documentation for an example of the exposed user information.\nThis function requires GRANT privileges on the @thingdb scope since it exposes user access and token information.\nThis function does not generate an event.\nFunction users_info()\nArguments None\nReturn value List with user info about all users in ThingsDB.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/procedures-api/",
	"title": "Procedures API",
	"tags": [],
	"description": "",
	"content": "Procedures API A procedure in ThingsDB is a named closure that is attached to a scope and available to use in an API call.\nProcedures can be used in the @thingsdb scope and in @collection scopes.\nThe same procedure name can be used in different scopes but must be unique within a scope.\nBelow is an example where we make a procedure in the @thingsdb scope to help us create a user in ThingsDB with some pre-defined access rights and a token for one day usage.\nnew_procedure('create_user', |name| { \u0026quot;Creates a new user with a token and some basic access rights.\u0026quot;; // Create the user new_user(name); // Create a `token` for one day token = new_token(name, now() + 3600 * 24); // Give watch access to the @node scope and read on collection `stuff` grant('@node', name, WATCH); grant('@:stuff', name, READ); // Return the token token; }); Once a procedure is created, it can be easily used via a run function in one of the native ThingsDB clients available (see the example below) or by performing a RUN request using the HTTP API (see connect section). For a more low-level example view the socket run example.\n Here is a complete working example where we use the Python client to call our procedure.\n import asyncio from thingsdb.client import Client client = Client() loop = asyncio.get_event_loop() async def create_user(name): # first we need to connect, in this example we assume ThingsDB is running # on localhost and the default admin user can be used await client.connect(\u0026#39;localhost\u0026#39;) await client.authenticate(\u0026#39;admin\u0026#39;, \u0026#39;pass\u0026#39;) # this is the code where we call our procedure token = await client.run(\u0026#39;create_user\u0026#39;, name, scope=\u0026#39;@thingsdb\u0026#39;) # run the example loop.run_until_complete(create_user(\u0026#39;iris\u0026#39;)) # the will close the client in a nice way client.close() loop.run_until_complete(client.wait_closed()) It is also possible to use the procedure within a query or from another procedure. This can be done with the run function.\n Here is an example query where we use run to create a new user.\n // Our procedure has side-effects so we need to wrap `run` with `wse` token = wse(run('create_user', 'cato')); // return the token token;  Example output in JSON format\n \u0026#34;Sj3WQ3dkm8Hl8B/iFoH9Cz\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/procedures-api/del_procedure/",
	"title": "del_procedure",
	"tags": [],
	"description": "",
	"content": "Delete a procedure.\nThis function generates an event.\nFunction del_procedure(procedure);\nArguments    Argument Type Description     procedure str (required) Procedure name to delete.    Return value Returns nil when successful. A lookup_err() is raised if the procedure does not exist.\nExample  This code will delete procedure add_one:\n new_procedure('add_one', |x| { \u0026quot;Adds one to a given value\u0026quot;; x + 1; }); // Delete procedure `add_one` del_procedure('add_one');  Return value in JSON format\n null "
},
{
	"uri": "https://docs.thingsdb.net/v0/procedures-api/has_procedure/",
	"title": "has_procedure",
	"tags": [],
	"description": "",
	"content": "Determines if a procedure exists in the current scope.\nThis function does not generate an event.\nFunction has_procedure(procedure)\nArguments    Argument Type Description     procedure str (required) Procedure name to check.    Return value Returns true if a procedure with a given name exists in the current scope and otherwise false.\nExample  This code shows an example use case of has_procedure():\n has_procedure('I_most_likely_do_not_exist');  Return value in JSON format\n false "
},
{
	"uri": "https://docs.thingsdb.net/v0/procedures-api/new_procedure/",
	"title": "new_procedure",
	"tags": [],
	"description": "",
	"content": "Creates a new procedure to the @thingsdb or a @collection scope. The name of the procedure must be unique within the scope. The given closure will be copied to the procedure, so this is not a reference to this closure.\nThis function generates an event.\nFunction new_procedure(name, closure);\nArguments    Argument Type Description     name str (required) Name of the new procedure.   closure closure (required) Closure which will be attached to the procedure.    Return value Returns the name of the new procedure. A lookup_err() is raised if the procedure already exists.\nExample  Create a new procedure add_one:\n // Create a new procedure `add_one` new_procedure('add_one', |x| { \u0026quot;Adds one to a given value\u0026quot;; x + 1; });  Return value in JSON format\n \u0026#34;add_one\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/procedures-api/procedure_doc/",
	"title": "procedure_doc",
	"tags": [],
	"description": "",
	"content": "Returns the doc string for a given procedure. An empty string is returned if the procedure has no doc string.\nThis function does not generate an event.\nFunction procedure_doc(procedure);\nArguments    Argument Type Description     procedure str (required) Name of the procedure where to return the doc string for.    Return value Returns the doc string for a given procedure.\nExample  Create a new procedure add_one:\n new_procedure('add_one', |x| { \u0026quot;Adds one to a given value\u0026quot;; x + 1; }); // Return the doc string for procedure `add_one` procedure_doc('add_one');  Return value in JSON format\n \u0026#34;Adds one to a given value\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/procedures-api/procedure_info/",
	"title": "procedure_info",
	"tags": [],
	"description": "",
	"content": "Returns information about a procedure.\n   Value Description     arguments Array with positional argument names.   created_at Time Stamp when the procedure is created.   definition Closure definition. (Only available with MODIFY privileges)   doc Doc string of the closure in the procedure.   name Name of the procedure.   with_side_effects Boolean value which indicates if this procedure has side effects.    This function does not generate an event.\nFunction procedure_info(procedure);\nArguments    Argument Type Description     procedure str (required) Name of the procedure where to return the info for.    Return value Returns info about a given procedure.\nExample  Create a new procedure add_one:\n new_procedure('add_one', |x| { \u0026quot;Adds one to a given value\u0026quot;; x + 1; }); // Return the doc string for procedure `add_one` procedure_info('add_one');  Return value in JSON format\n { \u0026#34;arguments\u0026#34;: [ \u0026#34;x\u0026#34; ], \u0026#34;created_at\u0026#34;: 1579175900, \u0026#34;definition\u0026#34;: \u0026#34;|x| {\\n \\\u0026#34;Adds one to a given value\\\u0026#34;;\\n x + 1;\\n}\u0026#34;, \u0026#34;doc\u0026#34;: \u0026#34;Adds one to a given value\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;add_one\u0026#34;, \u0026#34;with_side_effects\u0026#34;: false } "
},
{
	"uri": "https://docs.thingsdb.net/v0/procedures-api/procedures_info/",
	"title": "procedures_info",
	"tags": [],
	"description": "",
	"content": "Returns procedure information about all procedures in the scope.\nSee the procedure_info() function documentation for an example of the exposed procedure information.\nThis function does not generate an event.\nFunction procedures_info()\nArguments None\nReturn value List with procedure info about all procedures in the scope.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/procedures-api/run/",
	"title": "run",
	"tags": [],
	"description": "",
	"content": "Run a procedure.\nThis function does not generate an event.\nFunction run(procedure, ...args)\nArguments    Argument Type Description     procedure str (required) Name of the procedure to run.   \u0026hellip;args any The arguments for the procedure. If more arguments are given than the procedure expects, the redundant arguments will be ignored. If too few arguments are given, then the remaining arguments will be set to nil.    Return value Returns the procedure response.\nExample  Example code using run:\n // create a greet procedure new_procedure('greet', |name| isstr(name) ? \u0026quot;Hello \u0026quot; + name : \u0026quot;Hello unnamed user!\u0026quot; ); // run `greet` with a given name greet_iris = run('greet', \u0026quot;Iris\u0026quot;); // run `greet` with nil greet_nil = run('greet', nil); // return the greet response values [greet_iris, greet_nil];  Return value in JSON format\n [ \u0026#34;Hello Iris\u0026#34;, \u0026#34;Hello unnamed user!\u0026#34; ] "
},
{
	"uri": "https://docs.thingsdb.net/v0/watching/",
	"title": "Watching",
	"tags": [],
	"description": "",
	"content": "Socket connections can receive events from ThingsDB. Push events do only work when using a socket connection and cannot be used with the HTTP API.\nBefore events are received you have to subscribe for changes.\nThe following events may be received by a client:\n   Event Description     NODE_STATUS (0) The connected node has changed its status.   ON_INIT (1) Initial data for the thing which is added to the watch list.   ON_UPDATE (2) Update on a thing in the watch list.   ON_DELETE (3) A thing in the watch list is removed.   ON_STOP (4) A thing is no longer being watched.   WARNING (5) A warning message.     The number 0-5 represents the package type in a package header.\n Subscribe for node status changes For receiving NODE_STATUS events you need to sent a watch request to the @node scope. At least WATCH permissions for the @node scope are required.\nWhen using a client, this is pretty easy, for example using the Python client:\nawait client.watch(\u0026#39;@node\u0026#39;) If you want to write the request to the socket connection yourself, sending the following byte data on your socket connection will have the same result:\n\\x07\\x00\\x00\\x00\\x00\\x00\\x23\\xdc\\x91\\xa5@node (See the \u0026ldquo;creating a watch request example\u0026rdquo; on how we got the above bytes code)\nSubscribe for thing mutations If you start to watch a thing, the following events will be pushed in order:\n ON_INIT, This event will always be pushed on each watch request. ON_UPDATE, You receive an update event for each mutation after the initial ON_INIT event. ON_DELETE or ON_STOP, No more events will be pushed for the thing after this event.  To start watching one or more things, a watch request may be used, but as an alternative it is also possible to use the functions watch() and unwatch. There is no alternative function for watching the node status.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/watching/node-status/",
	"title": "node-status",
	"tags": [],
	"description": "",
	"content": "The body of a Node Status event contains only a string value. This string may be one of the following:\n   String Description     AWAY_SOON The node will enter away mode in a few seconds. Unless you really want to act on this state, this notification can be ignored.   AWAY The node is in away mode. Unless you really want to act on this state, this notification can be ignored.   READY The node is back to ready state. Unless you really want to act on this state, this notification can be ignored.   SHUTTING_DOWN The node will shutdown in a few seconds. This notification may be used to initiate a connection to another node.   OFFLINE The node will be off-line after this notification is received.     Example node status event in JSON format:\n \u0026#34;READY\u0026#34; "
},
{
	"uri": "https://docs.thingsdb.net/v0/watching/on-init/",
	"title": "on-init",
	"tags": [],
	"description": "",
	"content": "This event will be pushed on every request to watch a thing.\n Example on-init event in JSON format:\n { \u0026#34;event\u0026#34;: 123, \u0026#34;collection\u0026#34;: \u0026#34;stuff\u0026#34;, \u0026#34;thing\u0026#34;: { \u0026#34;#\u0026#34;: 42, \u0026#34;name\u0026#34;: \u0026#34;Iris\u0026#34; } } If the thing IS actually a collection, then the init event also contains all types and procedures inside the collection.\n Example on-init event for a collection in JSON format:\n { \u0026#34;event\u0026#34;: 123, \u0026#34;collection\u0026#34;: \u0026#34;stuff\u0026#34;, \u0026#34;thing\u0026#34;: { \u0026#34;#\u0026#34;: 3 }, \u0026#34;types\u0026#34;: [ { \u0026#34;type_id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Sample\u0026#34;, \u0026#34;created_at\u0026#34;: 1579592122, \u0026#34;modified_at\u0026#34;: 1579592122, \u0026#34;fields\u0026#34;: [ [\u0026#34;name\u0026#34;, \u0026#34;str?\u0026#34;] ] } ], \u0026#34;procedures\u0026#34;: [ { \u0026#34;doc\u0026#34;: \u0026#34;Sample procedure\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;multiply\u0026#34;, \u0026#34;created_at\u0026#34;: 1579592122, \u0026#34;definition\u0026#34;: \u0026#34;|a,b|{\u0026#39;Sample procedure\u0026#39;;a*b;}\u0026#34;, \u0026#34;with_side_effects\u0026#34;: false, \u0026#34;arguments\u0026#34;: [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;] } ] } "
},
{
	"uri": "https://docs.thingsdb.net/v0/watching/on-update/",
	"title": "on-update",
	"tags": [],
	"description": "",
	"content": "An update event is pushed when changes are made to a thing you are watching. Nested things need to be watched separately.\nThe event contains the Thing ID (#), an event number, and a jobs array containing all the mutations to the thing in the applied order.\n{ \u0026#34;#\u0026#34;: 3, \u0026#34;event\u0026#34;: 123, \u0026#34;jobs\u0026#34;: [ ...mutations ] } Each mutation is a map {} with a single key. This key tells what kind of mutation is applied to the thing. If the thing is actually a collection, you will receive both changes to the thing, as well as changes to the collection. This way you can also watch for collection mutations such as Type or procedure changes.\n   Mutation Target Description     set thing Add a new property.   del thing Delete a property.   add thing Add one or more things to a set.   remove thing Remove one or more things from a set.   splice thing Delete and/or add items to a list.   new_type collection A new type is added to the collection.   set_type collection A type is initialized.   del_type collection A type is removed from the collection.   mod_type_add collection A new field is added to an existing type.   mod_type_mod collection A field is modified on an existing type.   mod_type_del collection A field is removed from an existing type.   new_procedure collection A new procedure is added to the collection.   del_procedure collection A procedure is removed from the collection.    When new things are added via the mutations set, add or splice, Then the mutation will contain the complete thing with all properties. If on the other hand an existing thing is provided, then only the ID (#) is included.\n While most values inside mutation are easy to understand, a instance of a Type might seem a bit strange. For help with parsing such mutations see the set example below, and the mutation format documentation.\n set // Adds a property `name` with value `\u0026quot;ThingsDB\u0026quot;`. .name = \u0026quot;ThingsDB\u0026quot;;  Mutation result from the above code:\n { \u0026#34;set\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;ThingsDB\u0026#34; } } Most values like the one above are quite obvious but note that instances of a certain Type use the type_id and refer to fields with the values instead of the property names. For example:\n// set_type('Person', {name: 'str'}); .person = Person{name: \u0026quot;Iris\u0026quot;}; The mutation event of creating the Person above contains an empty key \u0026quot;\u0026quot; with an array of fields. They refer to the fields of the Type with type_id:0 which can be found at key \u0026quot;.\u0026quot;. The ID of the instance is equal to a normal thing and can be found with key \u0026quot;#\u0026quot;, so the ID is 5 in the example result below. For more information on how to parse a Type instance, look at the mutation format documentation.\n{ \u0026#34;set\u0026#34;: { \u0026#34;person\u0026#34;: { \u0026#34;\u0026#34;: [ \u0026#34;Iris\u0026#34; ], \u0026#34;#\u0026#34;: 5, \u0026#34;.\u0026#34;: 0 } } } del // Delete property `name`. // .name = \u0026quot;ThingsDB\u0026quot;; .del(\u0026quot;name\u0026quot;);  Mutation result from the above code:\n { \u0026#34;del\u0026#34;: \u0026#34;name\u0026#34; } add /* * Adds the existing things `#11`, `#23` and a new * thing `#42` to a *set* on property `myset`. */ // .myset = set(); .myset.add(#11, #23, {title: 'HG2G'});  Mutation result from the above code:\n { \u0026#34;add\u0026#34;: { \u0026#34;myset\u0026#34;: [{ \u0026#34;#\u0026#34;: 11 }, { \u0026#34;#\u0026#34;: 23 }, { \u0026#34;#\u0026#34;: 42, \u0026#34;title\u0026#34;: \u0026#34;HG2G\u0026#34; }] } } remove /* * Removes the things `#123` and `#42` are removed * from a *set* on property `myset`. */ // .myset = set(#55, #123, #42); .myset.remove(#123, #42);  Mutation result from the above code:\n { \u0026#34;remove\u0026#34;: { \u0026#34;myset\u0026#34;: [ 123, 42 ] } } splice /* * Add items `\u0026quot;c\u0026quot;` and `\u0026quot;d\u0026quot;` at position `2`, and * deletes `0` items to a *list* on property `arr`. */ // .arr = [\u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;]; .arr.push(\u0026quot;c\u0026quot;, \u0026quot;d\u0026quot;);  Mutation result from the above code:\n { \u0026#34;splice\u0026#34;: { \u0026#34;arr\u0026#34;: [2 , 0, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;] } } new_type /* * A new Type named `Person` is added to the collection * The `type_id` is usually not something you use, except * for other mutations which refer to `type_id` when creating * an instance of a Type. */ new_type('Person');  Mutation result from the above code:\n { \u0026#34;new_type\u0026#34;: { \u0026#34;created_at\u0026#34;: 1581453937, \u0026#34;name\u0026#34;: \u0026#34;Person\u0026#34;, \u0026#34;type_id\u0026#34;: 0 } } set_type /* * Set initial Type field definitions, field `name` * with definition `str` on type `Person` in this case. */ set_type('Person', {name: 'str'});  Mutation result from the above code:\n { \u0026#34;set_type\u0026#34;: { \u0026#34;fields\u0026#34;: [ [\u0026#34;name\u0026#34;, \u0026#34;str\u0026#34;] ], \u0026#34;modified_at\u0026#34;: 1581455876, \u0026#34;type_id\u0026#34;: 0 } } del_type // Delete a Type named `Person`. // new_type('Person'); del_type('Person');  Mutation result from the above code:\n { \u0026#34;del_type\u0026#34;: 0 } mod_type_add /* * Add a new field `rating` to type `Book`. If, and only if existing instances * of the type `Book` exist, the mutation contains an `init` field with * the given initial value. This value can be used to update earlier loaded * instances of type `Book` and may be updated with this initial value to stay * consistent with ThingsDB. */ // set_type('Book', {title: 'str'}); .book = Book{title: 'hhgttg'}; mod_type('Book', 'add', 'rating', 'uint', 1);  Mutation result from the above code:\n { \u0026#34;mod_type_add\u0026#34;: { \u0026#34;init\u0026#34;: 1, \u0026#34;modified_at\u0026#34;: 1581510638, \u0026#34;name\u0026#34;: \u0026#34;rating\u0026#34;, \u0026#34;spec\u0026#34;: \u0026#34;uint\u0026#34;, \u0026#34;type_id\u0026#34;: 2 } } mod_type_mod // Change field definition `rating` of type `Book`. // set_type('Book', {title: 'str', rating: 'uint'}); mod_type('Book', 'mod', 'rating', 'number');  Mutation result from the above code:\n { \u0026#34;mod_type_mod\u0026#34;: { \u0026#34;modified_at\u0026#34;: 1581511115, \u0026#34;name\u0026#34;: \u0026#34;rating\u0026#34;, \u0026#34;spec\u0026#34;: \u0026#34;number\u0026#34;, \u0026#34;type_id\u0026#34;: 2 } } mod_type_del // Delete the `rating` field definition of type `Book`. // set_type('Book', {title: 'str', rating: 'number'}); mod_type('Book', 'del', 'rating');  Mutation result from the above code:\n { \u0026#34;mod_type_del\u0026#34;: { \u0026#34;modified_at\u0026#34;: 1581511233, \u0026#34;name\u0026#34;: \u0026#34;rating\u0026#34;, \u0026#34;type_id\u0026#34;: 2 } } new_procedure // A new procedure named `multiply` is added to the collection. new_procedure('multiply', |a, b| a*b);  Mutation result from the above code:\n { \u0026#34;new_procedure\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;multiply\u0026#34;, \u0026#34;created_at\u0026#34;: 1579601906, \u0026#34;closure\u0026#34;: { \u0026#34;/\u0026#34;: \u0026#34;|a,b|a*b\u0026#34; } } } del_procedure // Delete a procedure named `multiply`. // new_procedure('multiply', |a, b| a*b); del_procedure('multiply');  Mutation result from the above code:\n { \u0026#34;del_procedure\u0026#34;: \u0026#34;multiply\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/watching/on-delete/",
	"title": "on-delete",
	"tags": [],
	"description": "",
	"content": "A delete event will be pushed as soon as a thing which you are watching, is removed from ThingsDB.\nIf this event is not received when expected, there might exist circular references to the removed thing. In this case you have to wait until garbage collection has cleaned the thing from ThingsDB. This is done when the node is in away mode.\n  Example watch delete event in JSON format:\n { \u0026#34;#\u0026#34;: 42 } "
},
{
	"uri": "https://docs.thingsdb.net/v0/watching/on-stop/",
	"title": "on-stop",
	"tags": [],
	"description": "",
	"content": "A stop event will be pushed as soon as a thing is no longer being watched.\nThis event is not pushed when a connection to a node is lost but only when watching is stopped by the user.\n  Example watch stop event in JSON format:\n { \u0026#34;#\u0026#34;: 42 } "
},
{
	"uri": "https://docs.thingsdb.net/v0/watching/warning/",
	"title": "warning",
	"tags": [],
	"description": "",
	"content": "ThingsDB might send a warning events to a client. The warn_code can be used to determine the warning type.\nThingsDB might push one of the following waning codes:\n   Code Description     1 This warning is pushed after attempting to watch a thing which does not exist in the collection.     Example warning event in JSON format:\n { \u0026#34;warn_code\u0026#34;: 1, \u0026#34;warn_msg\u0026#34;: \u0026#34;failed to watch thing ...\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/",
	"title": "Errors",
	"tags": [],
	"description": "",
	"content": "Errors ThingsDB uses the following error codes:\n   Error Code Meaning     operation_err -63 Operation is not valid in the current context.   num_arguments_err -62 Wrong number of arguments.   type_err -61 Object of inappropriate type.   value_err -60 Object has the right type but an inappropriate value.   overflow_err -59 Integer is too large to fit a 64 bit signed integer.   zero_div_err -58 Trying a division or modulo by zero.   max_quota_err -57 Some quota limit is reached.   auth_err -56 Wrong credentials or a request while the connection is not authenticated.   forbidden_err -55 You lack the privileges to do the request.   lookup_err -54 Requested resource not found or index out of range.   bad_data_err -53 Invalid data, for example an invalid data type used in a query.   syntax_err -52 Syntax error in the query.   node_err -51 At least one node has an issue while processing the request.   assert_err -50 Assertion statement has failed.    "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/assert_err/",
	"title": "assert_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when an assertion has failed.\nThis function does not generate an event.\nFunction assert_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows assert_err():\n assert_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;assert_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -50, \u0026#34;error_msg\u0026#34;: \u0026#34;assertion statement has failed\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/auth_err/",
	"title": "auth_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when authentication has failed.\nThis function does not generate an event.\nFunction auth_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows auth_err():\n auth_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;auth_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -56, \u0026#34;error_msg\u0026#34;: \u0026#34;authentication error\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/bad_data_err/",
	"title": "bad_data_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when a request is malformed.\nThis function does not generate an event.\nFunction bad_data_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows bad_data_err():\n bad_data_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;bad_data_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -53, \u0026#34;error_msg\u0026#34;: \u0026#34;unable to handle request due to invalid data\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/forbidden_err/",
	"title": "forbidden_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when the client or user is missing the required privileges.\nThis function does not generate an event.\nFunction forbidden_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows forbidden_err():\n forbidden_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;forbidden_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -55, \u0026#34;error_msg\u0026#34;: \u0026#34;forbidden (access denied)\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/lookup_err/",
	"title": "lookup_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when a requested resource is not found or when an index is out-of-range.\nThis function does not generate an event.\nFunction lookup_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows lookup_err():\n lookup_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;lookup_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -54, \u0026#34;error_msg\u0026#34;: \u0026#34;requested resource not found\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/max_quota_err/",
	"title": "max_quota_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when a quota limit is reached.\nThis function does not generate an event.\nFunction max_quota_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows max_quota_err():\n max_quota_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;max_quota_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -57, \u0026#34;error_msg\u0026#34;: \u0026#34;max quota is reached\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/node_err/",
	"title": "node_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when a node was not able to handle the request.\nThis function does not generate an event.\nFunction node_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows node_err():\n node_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;node_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -51, \u0026#34;error_msg\u0026#34;: \u0026#34;node is temporary unable to handle the request\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/num_arguments_err/",
	"title": "num_arguments_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when a wrong number of arguments is given.\nThis function does not generate an event.\nFunction num_arguments_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows num_arguments_err():\n num_arguments_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;num_arguments_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -62, \u0026#34;error_msg\u0026#34;: \u0026#34;wrong number of arguments\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/operation_err/",
	"title": "operation_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when an operation is not valid within the current context.\nThis function does not generate an event.\nFunction operation_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows operation_err():\n operation_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;operation_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -63, \u0026#34;error_msg\u0026#34;: \u0026#34;operation is not valid in the current context\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/overflow_err/",
	"title": "overflow_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when an attempt is made to create an integer value out of the supported 64Bit (signed) range.\nThis function does not generate an event.\nFunction overflow_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows overflow_err():\n overflow_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;overflow_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -59, \u0026#34;error_msg\u0026#34;: \u0026#34;integer overflow\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/syntax_err/",
	"title": "syntax_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when the given ThingsDB code contains a syntax error.\nThis function does not generate an event.\nFunction syntax_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows syntax_err():\n syntax_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;syntax_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -52, \u0026#34;error_msg\u0026#34;: \u0026#34;syntax error in query\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/type_err/",
	"title": "type_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when a given value is of the incorrect type.\nThis function does not generate an event.\nFunction type_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows type_err():\n type_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;type_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -61, \u0026#34;error_msg\u0026#34;: \u0026#34;object of inappropriate type\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/value_err/",
	"title": "value_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when a given value has the correct type but contains invalid data.\nThis function does not generate an event.\nFunction value_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows value_err():\n value_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;value_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -60, \u0026#34;error_msg\u0026#34;: \u0026#34;object has the right type but an inappropriate value\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/errors/zero_div_err/",
	"title": "zero_div_err",
	"tags": [],
	"description": "",
	"content": "Returns an error when an attempt is made to divide or take a modulo by zero.\nThis function does not generate an event.\nFunction zero_div_err([message])\nArguments    Argument Type Description     message str (optional) Alternative error message.    Return value An error value.\nExample  This code shows zero_div_err():\n zero_div_err();  Return value in JSON format\n { \u0026#34;!\u0026#34;: \u0026#34;zero_div_err()\u0026#34;, \u0026#34;error_code\u0026#34;: -58, \u0026#34;error_msg\u0026#34;: \u0026#34;division or module by zero\u0026#34; } "
},
{
	"uri": "https://docs.thingsdb.net/v0/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "ThingsDB Transceptor Technology, a Dutch software startup, is proud to announce ThingsDB to the world. ThingsDB is an object-oriented database with event-driven features that allows developers to store \u0026ldquo;things\u0026rdquo; in an intuitive way.\nGet it now Source code is available here at GitHub.\n"
},
{
	"uri": "https://docs.thingsdb.net/v0/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.thingsdb.net/v0/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]