<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Watching on ThingsDB documentation</title>
    <link>https://docs.thingsdb.net/v0/watching/</link>
    <description>Recent content in Watching on ThingsDB documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.thingsdb.net/v0/watching/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>node-status</title>
      <link>https://docs.thingsdb.net/v0/watching/node-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.thingsdb.net/v0/watching/node-status/</guid>
      <description>The body of a Node Status event contains only a string value. This string may be one of the following:
   String Description     AWAY_SOON The node will enter away mode in a few seconds. Unless you really want to act on this state, this notification can be ignored.   AWAY The node is in away mode. Unless you really want to act on this state, this notification can be ignored.</description>
    </item>
    
    <item>
      <title>on-init</title>
      <link>https://docs.thingsdb.net/v0/watching/on-init/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.thingsdb.net/v0/watching/on-init/</guid>
      <description>This event will be pushed once for each thing which is added to the watch list.
 Example on-init event in JSON format:
 { &amp;quot;event&amp;quot;: 123, &amp;quot;collection&amp;quot;: &amp;quot;stuff&amp;quot;, &amp;quot;thing&amp;quot;: { &amp;quot;#&amp;quot;: 42, &amp;quot;name&amp;quot;: &amp;quot;Iris&amp;quot; } }  If the thing IS actually a collection, then the init event also contains all types and procedures inside the collection.
 Example on-init event for a collection in JSON format:
 { &amp;quot;event&amp;quot;: 123, &amp;quot;collection&amp;quot;: &amp;quot;stuff&amp;quot;, &amp;quot;thing&amp;quot;: { &amp;quot;#&amp;quot;: 3 }, &amp;quot;types&amp;quot;: [ { &amp;quot;type_id&amp;quot;: 1, &amp;quot;name&amp;quot;: &amp;quot;Sample&amp;quot;, &amp;quot;created_at&amp;quot;: 1579592122, &amp;quot;modified_at&amp;quot;: 1579592122, &amp;quot;fields&amp;quot;: [ [&amp;quot;name&amp;quot;, &amp;quot;str?</description>
    </item>
    
    <item>
      <title>on-update</title>
      <link>https://docs.thingsdb.net/v0/watching/on-update/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.thingsdb.net/v0/watching/on-update/</guid>
      <description>An update event is pushed when changes are made to a thing you are watching. Nested things need to be watched separately.
The event contains the Thing ID (#), an event number, and an jobs array containing all the mutations which are applied to the thing in the order as they are put in the array.
{ &amp;quot;#&amp;quot;: 3, &amp;quot;event&amp;quot;: 123, &amp;quot;jobs&amp;quot;: [ ...mutations ] }  Each mutation is a map {} with a single key.</description>
    </item>
    
    <item>
      <title>on-delete</title>
      <link>https://docs.thingsdb.net/v0/watching/on-delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.thingsdb.net/v0/watching/on-delete/</guid>
      <description>A delete event will be pushed as soon as a thing which you are watching, is removed from ThingsDB.
If this event is not received when expected, there might exist circular references to the removed thing. In this case you have to wait until garbage collection has cleaned the thing from ThingsDB. This is done when the node is in away mode.
  Example watch delete event in JSON format:</description>
    </item>
    
    <item>
      <title>on-stop</title>
      <link>https://docs.thingsdb.net/v0/watching/on-stop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.thingsdb.net/v0/watching/on-stop/</guid>
      <description>A stop event will be pushed as soon as a thing has stopped with watching.
This event is not pushed when a connection to a node is lost but only when watching is stopped by the user.
  Example watch stop event in JSON format:
 { &amp;quot;#&amp;quot;: 42 }  </description>
    </item>
    
    <item>
      <title>warning</title>
      <link>https://docs.thingsdb.net/v0/watching/warning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.thingsdb.net/v0/watching/warning/</guid>
      <description>ThingsDB might send a warning events to a client. The warn_code can be used to determine the warning type.
ThingsDB might push one of the following waning codes:
   Code Description     1 This warning is pushed after attempting to watch a thing which does not exists in the collection.     Example warning event in JSON format:
 { &amp;quot;warn_code&amp;quot;: 1, &amp;quot;warn_msg&amp;quot;: &amp;quot;failed to watch thing .</description>
    </item>
    
  </channel>
</rss>